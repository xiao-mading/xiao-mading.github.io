<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>系统设计：通用对账中心</title>
    <link href="/2023/08/05/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%EF%BC%9A%E9%80%9A%E7%94%A8%E5%AF%B9%E8%B4%A6%E4%B8%AD%E5%BF%83/"/>
    <url>/2023/08/05/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%EF%BC%9A%E9%80%9A%E7%94%A8%E5%AF%B9%E8%B4%A6%E4%B8%AD%E5%BF%83/</url>
    
    <content type="html"><![CDATA[<h1 id="业务背景"><a href="#业务背景" class="headerlink" title="业务背景"></a>业务背景</h1><ul><li>交易支付对账：需要将商户与支付平台间对账自动化，确保商户信息流、支付平台资金链的一致性。</li><li>业务对账：需要将上下游业务系统间的对账自动化，确保业务数据一致性，提前发现问题，提高用户体验。</li><li>数据对账：系统重构后数据双写、数据迁移等场景间的数据对账自动化，确保双写一致性。</li></ul><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>□ 业务层面：</p><ul><li>实现对账、差错处理的的自动化、工具化，即可能的减少人工介入。</li><li>可以便捷的获取需要核对的原始数据，如平台数据、三方数据</li><li>可以灵活配置清洗、过滤、核对规则</li><li>可以查看核对的结果，可以对差异进行追踪管理、处理，可以对外提供核对结果</li></ul><p>□ 技术层面：</p><ul><li>具备通用对账能力，可适应多种对账场景</li><li>业务方能快速接入</li><li>可以应对大数据量的对账</li><li>具有较强的扩展能力</li></ul><h1 id="调研"><a href="#调研" class="headerlink" title="调研"></a>调研</h1><figure class="highlight properties"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="comment"># 陈元宇宙：对账系统从入门到精通 (基于产品视角)</span></span><br><span class="line"><span class="attr">http</span>:<span class="string">//paypm.cn/h-nd-81.html#_np=2_1268</span></span><br><span class="line"><span class="comment">#  卡拉云：如何设计财务对账系统 —— 从0到1搭建对账中心实战 (标准化入库还是没说，标准账单字段)</span></span><br><span class="line"><span class="attr">https</span>:<span class="string">//blog.csdn.net/weixin_48201324/article/details/118805747</span></span><br><span class="line"><span class="comment"># 有赞业务对账平台的探索与实践 (整体架构比较好，抽象了4个步骤的接口，采用SPI，无细节)</span></span><br><span class="line"><span class="attr">https</span>:<span class="string">//tech.youzan.com/practice-of-business-check-platform-in-youzan/</span></span><br><span class="line"><span class="comment"># 美团配送资金安全治理之对账体系建设 (比较全面，但是没有落地细节)</span></span><br><span class="line"><span class="attr">https</span>:<span class="string">//tech.meituan.com/2018/03/21/balance-accounts.html</span></span><br><span class="line"><span class="comment"># 支付对账系统怎么设计 (基于数据库的核对对账逻辑demo)</span></span><br><span class="line"><span class="attr">https</span>:<span class="string">//mp.weixin.qq.com/s/SOpwMsVB5wNkwMZdKKMkwg</span></span><br><span class="line"><span class="comment"># 苏宁基于 Apache Ignite 日均十亿数据对账实践应用 (分布式内存计算，无细节)</span></span><br><span class="line"><span class="attr">https</span>:<span class="string">//www.sohu.com/a/274723469_804130</span></span><br></pre></div></figure></td></tr></table></figure><p>市面上对于对账中心的架构设计文章是比较多的，但是具体怎么落地，很多细节还是很欠缺。</p><p>笔者的目标是根据调研结果，设计一个符合本公司业务及体量的通用对账系统，并且落地实现。</p><h1 id="难题"><a href="#难题" class="headerlink" title="难题"></a>难题</h1><p>1、对账数据源格式不一，怎么标准化存储？</p><p>既然格式不一，那就不标准化，直接存储CSV文件；然后配置字段名、核对键等元数据，使用时，根据元数据配置，解析为Map，在核对引擎中去做具体的核对处理。</p><p>2、如何根据配置，进行灵活的数据清洗、过滤、核对？</p><p>需要利用规则引擎，经过调研，选择了阿里的QLExpress，在页面上配置规则，生成对应的规则表达式，通过规则引擎执行计算</p><p>3、怎么进行双方数据源的核对？</p><p>见核对引擎-核对内核</p><p>4、如果对账数据源太大，怎么处理？</p><p>需要支持多种核对引擎</p><p>5、对账结果数据如何存储？如何应对数据量的日益增加？</p><p>由于需要在页面展示，所以存储选择存储在Mysql，后期进行分表处理</p><p>6、跨天导致的单边，如何处理？</p><p>需要支持跨对账周期，循环对账</p><h1 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h1><h2 id="业务架构"><a href="#业务架构" class="headerlink" title="业务架构"></a>业务架构</h2><img src="/2023/08/05/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%EF%BC%9A%E9%80%9A%E7%94%A8%E5%AF%B9%E8%B4%A6%E4%B8%AD%E5%BF%83/Snipaste_2023-09-20_09-52-48.png" alt="1"><h2 id="数据架构"><a href="#数据架构" class="headerlink" title="数据架构"></a>数据架构</h2><img src="/2023/08/05/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%EF%BC%9A%E9%80%9A%E7%94%A8%E5%AF%B9%E8%B4%A6%E4%B8%AD%E5%BF%83/Snipaste_2023-09-20_10-22-21.png" alt="1"><h1 id="组件及流程设计"><a href="#组件及流程设计" class="headerlink" title="组件及流程设计"></a>组件及流程设计</h1><img src="/2023/08/05/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%EF%BC%9A%E9%80%9A%E7%94%A8%E5%AF%B9%E8%B4%A6%E4%B8%AD%E5%BF%83/Snipaste_2023-12-12_17-55-07.png" alt="1"><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>主要负责对账场景的各种元数据配置。</p><p>1、对账场景配置：</p><img src="/2023/08/05/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%EF%BC%9A%E9%80%9A%E7%94%A8%E5%AF%B9%E8%B4%A6%E4%B8%AD%E5%BF%83/Snipaste_2023-12-22_14-57-57.png" alt="1" style="zoom: 67%;">  <p>2、清洗规则：</p><img src="/2023/08/05/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%EF%BC%9A%E9%80%9A%E7%94%A8%E5%AF%B9%E8%B4%A6%E4%B8%AD%E5%BF%83/Snipaste_2023-12-21_18-25-52.png" alt="1" style="zoom: 67%;"> <p>3、核对规则：</p><img src="/2023/08/05/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%EF%BC%9A%E9%80%9A%E7%94%A8%E5%AF%B9%E8%B4%A6%E4%B8%AD%E5%BF%83/Snipaste_2023-12-21_18-26-47.png" alt="1" style="zoom:70%;">  <p>4、展示内容：</p><img src="/2023/08/05/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%EF%BC%9A%E9%80%9A%E7%94%A8%E5%AF%B9%E8%B4%A6%E4%B8%AD%E5%BF%83/Snipaste_2023-12-21_18-27-05.png" alt="1">  <h2 id="数据接入"><a href="#数据接入" class="headerlink" title="数据接入"></a>数据接入</h2><img src="/2023/08/05/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%EF%BC%9A%E9%80%9A%E7%94%A8%E5%AF%B9%E8%B4%A6%E4%B8%AD%E5%BF%83/Snipaste_2023-12-22_14-16-21.png" alt="1" style="zoom:80%;"> <p>职责：负责从业务方获取对账数据源，并解析为CSV文件，调用存储引擎进行存储</p><p>设计与实现实现：支持多种接入方式，目前系统实现了以下数据拉取方式</p><ul><li>SQL：主要用于内部业务系统，前期快速接入，后期建议接入接口，推拉账单</li><li>HTTP：使用HTTP进行远程通信，通过约定的格式对业务方对账源数据，进行拉取</li><li>微信、支付宝等：拉取三方支付平台等外部系统的账单，one by one的接入</li><li>MQ：如果是准实时对账，那就需要感知业务，监听业务方的MQ，然后做对应的处理 （可参考美团-对账系统）</li></ul><p>接口：</p><img src="/2023/08/05/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%EF%BC%9A%E9%80%9A%E7%94%A8%E5%AF%B9%E8%B4%A6%E4%B8%AD%E5%BF%83/Snipaste_2023-12-22_15-23-34.png" alt="1" style="zoom:70%;">   <figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据拉取器：从对账方的数据源中拉取数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DataPuller</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拉取对账数据源指定日期的源数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> billMetaData</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">pull</span><span class="params">(BillMetaData billMetaData)</span>;</span><br><span class="line">&#125;</span><br></pre></div></figure></td></tr></table></figure><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><img src="/2023/08/05/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%EF%BC%9A%E9%80%9A%E7%94%A8%E5%AF%B9%E8%B4%A6%E4%B8%AD%E5%BF%83/Snipaste_2023-12-22_14-14-24.png" alt="1" style="zoom:80%;"> <p>职责：对账源数据的存储、提取</p><p>设计与实现：在接口设计上，支持多种存储方式，目前采用的是SFTP服务器</p><p>示例：</p><img src="/2023/08/05/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%EF%BC%9A%E9%80%9A%E7%94%A8%E5%AF%B9%E8%B4%A6%E4%B8%AD%E5%BF%83/Snipaste_2023-12-21_16-45-00.png" alt="1" style="zoom:80%;">  <p>接口：</p><img src="/2023/08/05/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%EF%BC%9A%E9%80%9A%E7%94%A8%E5%AF%B9%E8%B4%A6%E4%B8%AD%E5%BF%83/Snipaste_2023-12-22_15-26-28.png" alt="1" style="zoom:80%;">  <figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据存储器：保存从DataPuller拉取到的原始账单</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DataSaver</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">saveBill</span><span class="params">(BillMetaData billMetaData)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">loadBill</span><span class="params">(BillMetaData billMetaData)</span>;</span><br><span class="line">&#125;</span><br></pre></div></figure></td></tr></table></figure><h2 id="对账执行"><a href="#对账执行" class="headerlink" title="对账执行"></a>对账执行</h2><img src="/2023/08/05/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%EF%BC%9A%E9%80%9A%E7%94%A8%E5%AF%B9%E8%B4%A6%E4%B8%AD%E5%BF%83/Snipaste_2023-12-22_14-11-46.png" alt="1" style="zoom:80%;">  <h3 id="解析器"><a href="#解析器" class="headerlink" title="解析器"></a>解析器</h3><p>职责：将从存储引擎中取出的CSV文件，解析为Java内存中的标准的数据结构，用于后续流程操作</p><p>接口：</p><img src="/2023/08/05/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%EF%BC%9A%E9%80%9A%E7%94%A8%E5%AF%B9%E8%B4%A6%E4%B8%AD%E5%BF%83/Snipaste_2023-12-22_15-28-21.png" alt="1" style="zoom:80%;">  <figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据解析器：</span></span><br><span class="line"><span class="comment"> * 将从Saver中加载的数据，解析成统一的对账数据结构：List&lt;Map&lt;String, String&gt;&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DataParser</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将对账文件解析为对账标准数据结构</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tempBillFile</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Map&lt;String, String&gt;&gt; <span class="title function_">parse</span><span class="params">(File tempBillFile)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 部分解析，用于数据量大的账单，分页解析</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tempBillFile</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startIndex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> endIndex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Map&lt;String, String&gt;&gt; <span class="title function_">parse</span><span class="params">(File tempBillFile, </span></span><br><span class="line"><span class="params">                                    Integer startIndex, Integer endIndex)</span>;</span><br><span class="line">&#125;</span><br></pre></div></figure></td></tr></table></figure><h3 id="清洗器"><a href="#清洗器" class="headerlink" title="清洗器"></a>清洗器</h3><p>职责：根据对账任务配置的清洗规则，对数据进行清洗、过滤、数据类型转换、汇总等操作  </p><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据清洗器：将Parser解析后的数据，根据配置的规则进行分组、过滤、类型转换等处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DataCleaner</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清洗</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> taskDataSourceConfig</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> result</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">clean</span><span class="params">(TaskDataSourceConfig taskDataSourceConfig, </span></span><br><span class="line"><span class="params">                                    List&lt;Map&lt;String, String&gt;&gt; result)</span>;</span><br><span class="line">&#125;</span><br></pre></div></figure></td></tr></table></figure><h3 id="核对引擎"><a href="#核对引擎" class="headerlink" title="核对引擎"></a>核对引擎</h3><img src="/2023/08/05/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%EF%BC%9A%E9%80%9A%E7%94%A8%E5%AF%B9%E8%B4%A6%E4%B8%AD%E5%BF%83/Snipaste_2023-12-22_14-19-11.png" alt="1"> <p>职责：对清洗完成后的双方数据源，根据配置的核对规则，进行核对  </p><p>设计与实现：支持多种核对引擎，可动态切换，目前系统实现了以下核对引擎</p><ul><li>内存：因为目前我司采用D+1对账模式，现有的对账场景业务数据量并不大，所以在内存中直接核对，是最方便、效率最高的方式</li><li>Redis：如果数据量超过阈值，再使用内存核对，可能造成服务OOM，所以实现了基于Redis的核对引擎，用于大数据量的核对场景</li></ul><img src="/2023/08/05/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%EF%BC%9A%E9%80%9A%E7%94%A8%E5%AF%B9%E8%B4%A6%E4%B8%AD%E5%BF%83/Snipaste_2023-12-21_17-02-48.png" alt="1"><p>接口：</p><img src="/2023/08/05/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%EF%BC%9A%E9%80%9A%E7%94%A8%E5%AF%B9%E8%B4%A6%E4%B8%AD%E5%BF%83/Snipaste_2023-12-22_14-27-11.png" alt="1" style="zoom:80%;"> <figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 核对引擎</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CheckEngine</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行对账逻辑</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> task</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">check</span><span class="params">(Task task)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 核对引擎类型</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    DataCheckEngineEnum <span class="title function_">getCheckEngineEnum</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></div></figure></td></tr></table></figure><h4 id="对账内核"><a href="#对账内核" class="headerlink" title="对账内核"></a>对账内核</h4><p>那具体怎么核对尼？其实原理很简单，如下图：</p><img src="/2023/08/05/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%EF%BC%9A%E9%80%9A%E7%94%A8%E5%AF%B9%E8%B4%A6%E4%B8%AD%E5%BF%83/Snipaste_2023-12-21_17-05-15.png" alt="1" style="zoom:80%;">   <p>核心代码：无论哪种核对引擎，对账的核心逻辑都是类似的</p><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 核对引擎内核</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> task</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> taskCheckRuleConfig</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> leftDataList</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> rightDataList</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doCheck</span><span class="params">(Task task,</span></span><br><span class="line"><span class="params">                       TaskCheckRuleConfig taskCheckRuleConfig,</span></span><br><span class="line"><span class="params">                       List&lt;Map&lt;String, Object&gt;&gt; leftDataList,</span></span><br><span class="line"><span class="params">                       List&lt;Map&lt;String, Object&gt;&gt; rightDataList)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">TaskRunLog</span> <span class="variable">taskRunLog</span> <span class="operator">=</span> task.getTaskRunLog();</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; leftShowFields = task.getLeftShowFields();</span><br><span class="line">    List&lt;String&gt; rightShowFields = task.getRightShowFields();</span><br><span class="line"></span><br><span class="line">    <span class="type">TaskDataSourceConfig</span> <span class="variable">leftTaskDataSourceConfig</span> <span class="operator">=</span> task.getLeftTaskDataSourceConfig();</span><br><span class="line">    <span class="type">TaskDataSourceConfig</span> <span class="variable">rightTaskDataSourceConfig</span> <span class="operator">=</span> task.getRightTaskDataSourceConfig();</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">leftCheckKey</span> <span class="operator">=</span> leftTaskDataSourceConfig.getCheckKey();</span><br><span class="line">    <span class="type">String</span> <span class="variable">rightCheckKey</span> <span class="operator">=</span> rightTaskDataSourceConfig.getCheckKey();</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">checkRuleExpression</span> <span class="operator">=</span> taskCheckRuleConfig.getCheckRuleExpression();</span><br><span class="line">    log.info(<span class="string">&quot;[执行对账]taskId：&#123;&#125;,checkRuleExpression：&#123;&#125;&quot;</span>, task.getId(), checkRuleExpression);</span><br><span class="line">    AssertUtil.notBlank(checkRuleExpression, <span class="string">&quot;[执行对账]checkRuleExpression为空,taskCheckRuleConfigId：&quot;</span> + taskCheckRuleConfig.getId());</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">equalNum</span> <span class="operator">=</span> taskRunLog.getEqualNum();</span><br><span class="line">    <span class="type">int</span> <span class="variable">wrongNum</span> <span class="operator">=</span> taskRunLog.getWrongNum();</span><br><span class="line">    <span class="type">int</span> <span class="variable">leftMoreNum</span> <span class="operator">=</span> taskRunLog.getLeftMoreNum();</span><br><span class="line">    <span class="comment">// 可以优化一下：若右方数据是空的，则左边全为多帐</span></span><br><span class="line">    Map&lt;Object, List&lt;Map&lt;String, Object&gt;&gt;&gt; rightDataMap = rightDataList.stream().collect(Collectors.groupingBy(o -&gt; o.get(rightCheckKey)));</span><br><span class="line">    <span class="keyword">for</span> (Map&lt;String, Object&gt; leftData : leftDataList) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">checkKeyValue</span> <span class="operator">=</span> leftData.get(leftCheckKey);</span><br><span class="line">        <span class="type">String</span> <span class="variable">leftShowData</span> <span class="operator">=</span> getShowData(leftData, leftShowFields);</span><br><span class="line"></span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; rightValueList = rightDataMap.get(checkKeyValue);</span><br><span class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(rightValueList)) &#123;</span><br><span class="line">            <span class="comment">// 因为前面的步骤，已经根据groupModel进行处理了，所以这里不用再考虑1个核对key，多行记录的情况</span></span><br><span class="line">            Map&lt;String, Object&gt; rightData = rightValueList.get(<span class="number">0</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">rightShowData</span> <span class="operator">=</span> getShowData(rightData, rightShowFields);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 执行规则表达式</span></span><br><span class="line">            DefaultContext&lt;String, Object&gt; context = QlExpress.newContext();</span><br><span class="line">            context.put(CheckPartEnum.LEFT.getType(), leftData);</span><br><span class="line">            context.put(CheckPartEnum.RIGHT.getType(), rightData);</span><br><span class="line">            <span class="type">Boolean</span> <span class="variable">checkResult</span> <span class="operator">=</span> (Boolean) QlExpress.runner.execute(checkRuleExpression, context, <span class="literal">null</span>, <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (BooleanUtils.isTrue(checkResult)) &#123;</span><br><span class="line">                <span class="comment">// 平账</span></span><br><span class="line">                equalNum++;</span><br><span class="line">                taskRunLog.createEqualDetail(checkKeyValue.toString(), leftShowData, rightShowData);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 错账</span></span><br><span class="line">                wrongNum++;</span><br><span class="line">                taskRunLog.createWrongDetail(checkKeyValue.toString(), leftShowData, rightShowData);</span><br><span class="line">            &#125;</span><br><span class="line">            rightData.put(DEAL_FLAG, <span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// left多帐</span></span><br><span class="line">            leftMoreNum++;</span><br><span class="line">            taskRunLog.createLeftMoreDetail(checkKeyValue.toString(), leftShowData, JSON.toJSONString(leftData));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    taskRunLog.setEqualNum(equalNum)</span><br><span class="line">        .setWrongNum(wrongNum)</span><br><span class="line">        .setLeftMoreNum(leftMoreNum);</span><br><span class="line">&#125;</span><br></pre></div></figure></td></tr></table></figure><h2 id="差错处理器"><a href="#差错处理器" class="headerlink" title="差错处理器"></a>差错处理器</h2><p>职责：把对账结果非平账的数据，进行二次核对，如果仍然有错误，做对应的处理</p><ul><li>二次核对：主要是处理日切的数据，因为按照D+1进行对账，可能存在双方的数据跨天</li><li>差错处理：主要是告警</li></ul><h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h2><img src="/2023/08/05/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%EF%BC%9A%E9%80%9A%E7%94%A8%E5%AF%B9%E8%B4%A6%E4%B8%AD%E5%BF%83/Snipaste_2023-12-22_14-08-08.png" alt="1" style="zoom:80%;"> <p><b></b></p><img src="/2023/08/05/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%EF%BC%9A%E9%80%9A%E7%94%A8%E5%AF%B9%E8%B4%A6%E4%B8%AD%E5%BF%83/Snipaste_2023-12-22_14-10-40.png" alt="1" style="zoom:75%;"> <p><b></b></p><img src="/2023/08/05/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%EF%BC%9A%E9%80%9A%E7%94%A8%E5%AF%B9%E8%B4%A6%E4%B8%AD%E5%BF%83/Snipaste_2023-12-22_16-45-42.png" alt="1" style="zoom:75%;">  ]]></content>
    
    
    <categories>
      
      <category>系统设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>通用对账中心</tag>
      
      <tag>QLExpress</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>生产事故：事务与锁</title>
    <link href="/2023/07/20/%E7%94%9F%E4%BA%A7%E4%BA%8B%E6%95%85%EF%BC%9A%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%94%81/"/>
    <url>/2023/07/20/%E7%94%9F%E4%BA%A7%E4%BA%8B%E6%95%85%EF%BC%9A%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%94%81/</url>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>□ 现象：组内同事负责的支付中心，在与三方支付平台进行对账时，发现本地钱包、三方支付平台的余额对不上</p><p>□ 排查：在钱包流水表中发现了异常，存在两条一模一样的流水记录</p><img src="/2023/07/20/%E7%94%9F%E4%BA%A7%E4%BA%8B%E6%95%85%EF%BC%9A%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%94%81/Snipaste_2022-05-25_16-30-37.png" alt="1" style="zoom:80%;"><h1 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h1><p>经过现象初步定位，是修改钱包余额的代码存在问题，但是钱包余额修改是加了分布式锁的，并且正常运行了很久了，近期没有进行过修改。于是组内成员(也包括我)开始协助排查</p><p>1、复现问题：先看是否能复现问题</p><ol><li>找到该条记录的，接口参数，进行debug，发现结果无误</li><li>怀疑是多线程并发导致，使用单元测试，用多线程去压测 （未复现）</li></ol><p>2、既然业务逻辑没问题，就怀疑分布式锁没锁住了，从下面几个方面排查</p><ol><li><p>Redis主从切换：怀疑是redis发生了主从切换，导致锁丢失</p><p>让运维协助排查，业务动作的前后几天，都未发现有Redis主从切换</p></li><li><p>详细排查代码：最终发现了问题</p><img src="/2023/07/20/%E7%94%9F%E4%BA%A7%E4%BA%8B%E6%95%85%EF%BC%9A%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%94%81/Snipaste_2022-05-25_16-55-30.png" alt="2" style="zoom:80%;"><p><b></b></p><img src="/2023/07/20/%E7%94%9F%E4%BA%A7%E4%BA%8B%E6%95%85%EF%BC%9A%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%94%81/Snipaste_2022-05-25_17-00-03.png" alt="3" style="zoom:80%;"> <p>2.1）事务源码：看过Spring事务源码的，都知道是基于AOP实现的，执行流程如下：</p><img src="/2023/07/20/%E7%94%9F%E4%BA%A7%E4%BA%8B%E6%95%85%EF%BC%9A%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%94%81/Snipaste_2023-12-18_12-50-04.png" alt="4" style="zoom:70%;">   <p>2.2）问题：目标方法执行完了，锁就释放了，但是此时事务还没提交 （锁的范围 &lt; 事务范围）</p><img src="/2023/07/20/%E7%94%9F%E4%BA%A7%E4%BA%8B%E6%95%85%EF%BC%9A%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%94%81/Snipaste_2023-12-18_12-43-17.png" alt="5" style="zoom:80%;">    <p>2.3）并发：如果在A请求，锁释放了，事务还没提交时。B请求又进来了，也能正常进行业务操作</p></li></ol><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>问题分析清楚了，那就有以下几种解决方案</p><h2 id="1、数据库锁"><a href="#1、数据库锁" class="headerlink" title="1、数据库锁"></a>1、数据库锁</h2><p>不要使用基于Redis的分布式锁了，改为使用数据库悲观锁</p><p>在<code>changeAmount()</code>方法中，用数据库的悲观锁 (悲观锁在事务提交完成后，才会释放)</p><img src="/2023/07/20/%E7%94%9F%E4%BA%A7%E4%BA%8B%E6%95%85%EF%BC%9A%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%94%81/Snipaste_2023-12-20_12-31-40.png" alt="6" style="zoom:80%;"><p><b></b></p><img src="/2023/07/20/%E7%94%9F%E4%BA%A7%E4%BA%8B%E6%95%85%EF%BC%9A%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%94%81/Snipaste_2023-12-20_12-32-16.png" alt="7" style="zoom:80%;"><h2 id="2、加锁范围调整"><a href="#2、加锁范围调整" class="headerlink" title="2、加锁范围调整"></a>2、加锁范围调整</h2><p>既然问题出在，锁的范围 &lt; 事务范围，那就让锁的范围 &gt;&#x3D; 事务范围即可</p><p>改动点：在业务操作的最外层，加分布式锁</p><p>考虑：由于历史债务，调用方有很多，所以暂时未采用该方案</p><p>□ 伪代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="comment">// 收入</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">income</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">LockInfo</span> <span class="variable">lock</span> <span class="operator">=</span> lockTemplate.lock(lockKey);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 操作钱包、钱包流水</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lockTemplate.releaseLock(lock);</span><br><span class="line">    &#125;            </span><br><span class="line">&#125;</span><br></pre></div></figure></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="comment">// 转账</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">LockInfo</span> <span class="variable">lock</span> <span class="operator">=</span> lockTemplate.lock(lockKey);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 操作钱包、钱包流水</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lockTemplate.releaseLock(lock);</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></div></figure></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="comment">// 扣减</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">LockInfo</span> <span class="variable">lock</span> <span class="operator">=</span> lockTemplate.lock(lockKey);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 操作钱包、钱包流水</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lockTemplate.releaseLock(lock);</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></div></figure></td></tr></table></figure><h1 id="加锁切面"><a href="#加锁切面" class="headerlink" title="加锁切面"></a>加锁切面</h1><p>这里再提一句，一般分布式锁，我们会封装成1个AOP，使用注解来调用。那在某些使用情况下，也需要注意</p><h2 id="1、AOP失效"><a href="#1、AOP失效" class="headerlink" title="1、AOP失效"></a>1、AOP失效</h2><p>加锁AOP的失效，同事务失效的原因一样，如果采用this调用等方式，会导致AOP失效，使用时需要注意</p><h2 id="2、AOP优先级"><a href="#2、AOP优先级" class="headerlink" title="2、AOP优先级"></a>2、AOP优先级</h2><p>之前，在其他项目中，我看到有人这样使用：</p><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="meta">@RedisLock</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 业务操作</span></span><br><span class="line">&#125;</span><br></pre></div></figure></td></tr></table></figure><p>因为<code>@Transactional</code>底层一样是使用AOP来实现的，所以也可能会存问题，具体来说就是：</p><p>若<code>@RedisLock切面优先级</code> &lt; <code>@Transactional切面优先级</code>，就会导致【锁的范围 &lt; 事务范围】，就会出现上面的问题</p><p>那么自定义的AOP切面，和事务的切面，优先级，到底谁高谁低尼？</p><br><p>1、事务切面优先级</p><img src="/2023/07/20/%E7%94%9F%E4%BA%A7%E4%BA%8B%E6%95%85%EF%BC%9A%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%94%81/Snipaste_2023-12-20_12-49-22.png" alt="8" style="zoom:80%;"> <p>我们知道事务切面<code>BeanFactoryTransactionAttributeSourceAdvisor</code>，实现了Ordered，但是并未重写该方法</p><img src="/2023/07/20/%E7%94%9F%E4%BA%A7%E4%BA%8B%E6%95%85%EF%BC%9A%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%94%81/Snipaste_2023-12-20_12-51-23.png" alt="9" style="zoom:80%;"> <p>而<code>AbstractPointcutAdvisor</code>中，如果未指定order，默认为：<code>Ordered.LOWEST_PRECEDENCE</code>也就是最低优先级</p><p>2、自定义切面优先级</p><img src="/2023/07/20/%E7%94%9F%E4%BA%A7%E4%BA%8B%E6%95%85%EF%BC%9A%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%94%81/Snipaste_2023-12-20_12-53-32.png" alt="10" style="zoom:80%;"><p>假设我们没有使用<code>@Order</code>，<code>@Aspect</code>最终会被封装为<code>InstantiationModelAwarePointcutAdvisorImpl</code></p><img src="/2023/07/20/%E7%94%9F%E4%BA%A7%E4%BA%8B%E6%95%85%EF%BC%9A%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%94%81/Snipaste_2023-12-20_12-57-51.png" alt="11" style="zoom:80%;"> <p><b></b></p><img src="/2023/07/20/%E7%94%9F%E4%BA%A7%E4%BA%8B%E6%95%85%EF%BC%9A%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%94%81/Snipaste_2023-12-20_12-59-52.png" alt="12" style="zoom:80%;"><p><b></b></p><img src="/2023/07/20/%E7%94%9F%E4%BA%A7%E4%BA%8B%E6%95%85%EF%BC%9A%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%94%81/Snipaste_2023-12-20_13-00-00.png" alt="11" style="zoom:80%;"> <p>从源码，我们可以看到，如果不指定Order值，默认为：<code>Ordered.LOWEST_PRECEDENCE</code>也就是最低优先级</p><p>3、都是最低优先级，那到底哪个先执行？测试一下，就知道了</p><img src="/2023/07/20/%E7%94%9F%E4%BA%A7%E4%BA%8B%E6%95%85%EF%BC%9A%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%94%81/Snipaste_2023-12-20_13-02-18.png" alt="12" style="zoom:80%;"><p><b></b></p><img src="/2023/07/20/%E7%94%9F%E4%BA%A7%E4%BA%8B%E6%95%85%EF%BC%9A%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%94%81/Snipaste_2023-12-20_13-03-38.png" alt="13" style="zoom:80%;"> <p>可以看到，事务切面的优先级更高，会先执行。</p><p>□ 解决方案：</p><ol><li><p>在外层方法中加<code>@RedisLock</code>：推荐</p></li><li><p>给<code>LockRedisAop</code>设置优先级：不推荐</p><figure class="highlight shell"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line">1、因为公司一般是封装的公共组件，不太容易更改；即使改了，可能对其他业务造成不可评估的影响</span><br><span class="line">2、万一哪天优先级被别人改了，可能引发生产事故</span><br><span class="line">3、维护难度大，需要对Spring源码有一定掌握程度，否则无法预料程序执行结果</span><br></pre></div></figure></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>生产事故</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分布式锁</tag>
      
      <tag>事务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>生产事故：RocketMQ消息体大小超出限制</title>
    <link href="/2023/07/01/%E7%94%9F%E4%BA%A7%E4%BA%8B%E6%95%85%EF%BC%9ARocketMQ%E6%B6%88%E6%81%AF%E4%BD%93%E5%A4%A7%E5%B0%8F%E8%B6%85%E5%87%BA%E9%99%90%E5%88%B6/"/>
    <url>/2023/07/01/%E7%94%9F%E4%BA%A7%E4%BA%8B%E6%95%85%EF%BC%9ARocketMQ%E6%B6%88%E6%81%AF%E4%BD%93%E5%A4%A7%E5%B0%8F%E8%B6%85%E5%87%BA%E9%99%90%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>现象：某日，我负责的清结算相关服务，出现大量告警，告警信息显示订单接口超时，然后其余业务线的同事也相继发现类似问题。立即联系负责订单的同学，进行排查。</p><img src="/2023/07/01/%E7%94%9F%E4%BA%A7%E4%BA%8B%E6%95%85%EF%BC%9ARocketMQ%E6%B6%88%E6%81%AF%E4%BD%93%E5%A4%A7%E5%B0%8F%E8%B6%85%E5%87%BA%E9%99%90%E5%88%B6/Snipaste_2023-12-14_12-43-22.png" alt="1" style="zoom:80%;"> <p> 同时，我们也通过监控等手段，协助定位问题。</p><p>1）我立马去看观测云的容器监控：</p><figure class="highlight shell"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line">1、先是1个容器CPU 100%</span><br><span class="line">2、后面发现4个容器都 100%了</span><br><span class="line"></span><br><span class="line">运维：即使重新拉起来，一会儿又100%了</span><br></pre></div></figure></td></tr></table></figure><img src="/2023/07/01/%E7%94%9F%E4%BA%A7%E4%BA%8B%E6%95%85%EF%BC%9ARocketMQ%E6%B6%88%E6%81%AF%E4%BD%93%E5%A4%A7%E5%B0%8F%E8%B6%85%E5%87%BA%E9%99%90%E5%88%B6/Snipaste_2023-12-14_12-47-00.png" alt="Snipaste_2023-12-14_12-47-00" style="zoom:80%;"><p>2、查看skywalking：发现线程数，没有什么异常，和其他正常的服务差不多</p><img src="/2023/07/01/%E7%94%9F%E4%BA%A7%E4%BA%8B%E6%95%85%EF%BC%9ARocketMQ%E6%B6%88%E6%81%AF%E4%BD%93%E5%A4%A7%E5%B0%8F%E8%B6%85%E5%87%BA%E9%99%90%E5%88%B6/Snipaste_2023-12-14_12-48-37.png" alt="3" style="zoom:80%;"> <p>3、在其他同事的电脑上，看到了订单的告警群信息：因为我没在订单告警群中</p><figure class="highlight shell"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line">[2023-06-30 13:06:17 623][ConsumeMessageThread_15][ERROR][c.x.i.y.i.m.i.SendMqMsgServiceImpl:55][TID:944e5813117f40a597709b1db1ea81d4.xxx][DD:] 发送消息失败，</span><br><span class="line">org.springframework.messaging.MessagingException: CODE: 13  DESC: the message body size over max value, MAX: 4194304</span><br></pre></div></figure></td></tr></table></figure><p>4、在观测云搜索相关日志：基本可以断定，是因为这个原因，把CPU打满了，一条日志就是好几M，MQ还在不停重试</p><img src="/2023/07/01/%E7%94%9F%E4%BA%A7%E4%BA%8B%E6%95%85%EF%BC%9ARocketMQ%E6%B6%88%E6%81%AF%E4%BD%93%E5%A4%A7%E5%B0%8F%E8%B6%85%E5%87%BA%E9%99%90%E5%88%B6/Snipaste_2023-12-14_12-53-23.png" alt="5"><img src="/2023/07/01/%E7%94%9F%E4%BA%A7%E4%BA%8B%E6%95%85%EF%BC%9ARocketMQ%E6%B6%88%E6%81%AF%E4%BD%93%E5%A4%A7%E5%B0%8F%E8%B6%85%E5%87%BA%E9%99%90%E5%88%B6/Snipaste_2023-12-14_12-54-44.png" alt="6"><img src="/2023/07/01/%E7%94%9F%E4%BA%A7%E4%BA%8B%E6%95%85%EF%BC%9ARocketMQ%E6%B6%88%E6%81%AF%E4%BD%93%E5%A4%A7%E5%B0%8F%E8%B6%85%E5%87%BA%E9%99%90%E5%88%B6/Snipaste_2023-12-14_12-55-28.png" alt="7"><p>5、紧急处理：先把这1个订单，手动修改在数据库中的状态，这样消费时，就相当于ACK了。</p><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>我们知道RocketMQ的消息大小限制为4M，那为什么会导致消息体超出了4M尼？需要进行整体复盘</p><p>业务场景：有1个客户，下了1个5000+瓶酒的订单</p><p>系统场景：发货时，订单会把本次发货的相关信息广播出来，清结算、营销等会监听MQ，做对应的处理</p><p>出问题的点：订单发出来的MQ中，包含了所有酒的二维码字符串(如下图)，导致消息体大小巨大</p><img src="/2023/07/01/%E7%94%9F%E4%BA%A7%E4%BA%8B%E6%95%85%EF%BC%9ARocketMQ%E6%B6%88%E6%81%AF%E4%BD%93%E5%A4%A7%E5%B0%8F%E8%B6%85%E5%87%BA%E9%99%90%E5%88%B6/Snipaste_2023-12-14_15-13-46.png" alt="11"><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><figure class="highlight shell"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line">方案1：增加阈值标记位：根据单次事件(收货、发货)的码数量进行标记</span><br><span class="line">flag &lt;= 1000：正常携带码信息</span><br><span class="line">flag &gt; 1000：MQ消息体内不会携带码，下游系统自己分页查询</span><br><span class="line">方案2：针对某些定制的(分润)，分批发送，对下游业务系统改动小</span><br><span class="line">- 前提：需要记录本次事件绑定的码 (本次发货的id，及对应的是哪些码)</span><br></pre></div></figure></td></tr></table></figure><h2 id="1-不传递码"><a href="#1-不传递码" class="headerlink" title="1.不传递码"></a>1.不传递码</h2><p>思路：既然是二维码字符串导致消息体巨大，那就不要在消息体里传递该数据了，消费者收到消息后，再去订单反查二维码信息，做业务逻辑处理</p><p>优点：订单改造简单</p><p>缺点：</p><p>1、消费方改动面广，所有消费者都需要修改</p><p>2、如果消费方都来反查订单，会造成订单的查询压力巨大</p><h2 id="2-部分传递码"><a href="#2-部分传递码" class="headerlink" title="2.部分传递码"></a>2.部分传递码</h2><p>既然完全不传递码，有一些缺点，那就有1个折中的方案。</p><p>订单发出MQ时，增加1个阈值标记位</p><figure class="highlight shell"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line">标记位字段：hasCodeflag</span><br><span class="line">- true：携带了全量的二维码码信息</span><br><span class="line">- false：未携带二维码信息，需要消费者自行分页查询</span><br><span class="line">商品数量 &lt;= 1000：hasCodeflag = true</span><br><span class="line">商品数量 &gt; 1000：hasCodeflag = false</span><br></pre></div></figure></td></tr></table></figure><p>优点：更加灵活，相对方案1来说，减少了订单的查询压力；</p><p>缺点：</p><p>1、生产者、消费者都需要改造</p><p>2、消费者需要分页查询，业务逻辑变得复杂</p><h2 id="3-分批发送"><a href="#3-分批发送" class="headerlink" title="3.分批发送"></a>3.分批发送</h2><p>既然动消费者的修改面太大，那就在生产者上想办法，将1个订单的事件，分批发送。</p><p>例：订单1次发货事件，发了1000瓶酒，拆成5次MQ发送</p><p>□ 问题：</p><ol><li><p>消费方需要支持同1个订单，多次消费：依赖上游传递不同的幂等键</p><figure class="highlight shell"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line">本身我们的业务就支持1个订单多次发货</span><br><span class="line">所以只需要订单将1个发货事件，在系统上虚拟成多个发货事件即可，消费者无需改动</span><br></pre></div></figure></td></tr></table></figure></li><li><p>订单需要存储批次映射关系：1个分货事件拆分成多个后，需要存储映射关系</p></li></ol><p>□ 下游消费效果：可以看到，1个订单，发了多次货，都消费成功</p><img src="/2023/07/01/%E7%94%9F%E4%BA%A7%E4%BA%8B%E6%95%85%EF%BC%9ARocketMQ%E6%B6%88%E6%81%AF%E4%BD%93%E5%A4%A7%E5%B0%8F%E8%B6%85%E5%87%BA%E9%99%90%E5%88%B6/Snipaste_2023-12-14_15-42-26.png" alt="12"><h2 id="4-不传消息体"><a href="#4-不传消息体" class="headerlink" title="4.不传消息体"></a>4.不传消息体</h2><p>还有1种最彻底的改造方案，问题不是出在消息体过大吗，那解决问题最好的方法，不传消息体。</p><p>当然这里不是说不传递任何信息，而是指不传递消息体的内容，将消息体放在额外的地方存储，消费方在消费时，再去获取消息体，然后消费。这也是阿里云给出的解决方案。</p><img src="/2023/07/01/%E7%94%9F%E4%BA%A7%E4%BA%8B%E6%95%85%EF%BC%9ARocketMQ%E6%B6%88%E6%81%AF%E4%BD%93%E5%A4%A7%E5%B0%8F%E8%B6%85%E5%87%BA%E9%99%90%E5%88%B6/Snipaste_2023-12-14_15-48-56.png" alt="13"><p><a href="https://help.aliyun.com/zh/apsaramq-for-rocketmq/cloud-message-queue-rocketmq-5-x-series/product-overview/usage-limits">阿里云文档地址</a></p><p>问题：</p><p>1、生产者、消费者都需要改造</p><p>2、额外依赖：可能某个消费者未引入OSS，还得接入。</p><p>3、延时问题：若生产者上传OSS延时、失败，将导致消息丢失、延迟，需要额外的机制进行保障和优化</p><h2 id="5-压缩"><a href="#5-压缩" class="headerlink" title="5.压缩"></a>5.压缩</h2><p>当然还有1种方式，就是对消息体进行压缩，但是个人觉得这并非完美的解决方案。</p><p>问题：</p><p>1、生产者、消费者都需要修改</p><p>2、压缩的效果一般视内容而定，某些情况下，压缩并不一定能减少消息体大小</p><br><p>□ 代码demo：</p><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="keyword">import</span> cn.hutool.core.codec.Base64;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.codec.Base64Encoder;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.ZipUtil;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.mdw.common.util.my.FileToStringUtil;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.BooleanUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.spring.core.RocketMQTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.support.MessageBuilder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 压缩MQ消息体</span></span><br><span class="line"><span class="comment"> * 压缩工具类：hutool.gzip</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompressedMqTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> RocketMQTemplate rocketMqTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">compressedSizeLimit</span> <span class="operator">=</span>  <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span>; <span class="comment">// 2M</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">COMPRESSED_FLAG</span> <span class="operator">=</span> <span class="string">&quot;COMPRESSED&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 生产</span></span><br><span class="line">        Message&lt;String&gt; msg = sendMq();</span><br><span class="line">        <span class="comment">// 消费</span></span><br><span class="line">        consumeMq(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Message&lt;String&gt; <span class="title function_">sendMq</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// String msgBody = &quot;假装这是一个巨大巨大的消息体，竟然足足有5M之多，超过了4M&quot;;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">msgBodyPath</span> <span class="operator">=</span> <span class="string">&quot;D:/超大MQ消息体-11M.txt&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msgBody</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(Files.readAllBytes(Paths.get(msgBodyPath))); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 超过2M则压缩</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">compressed</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        System.out.printf(<span class="string">&quot;压缩前,msgBodySize：%.2f M\r\n&quot;</span> ,(<span class="type">double</span>) msgBody.getBytes().length / <span class="number">1024</span> / <span class="number">1024</span>);</span><br><span class="line">        <span class="keyword">if</span> (msgBody.getBytes().length &gt;= compressedSizeLimit) &#123;</span><br><span class="line">            msgBody = Base64Encoder.encode(ZipUtil.gzip(msgBody.getBytes()));</span><br><span class="line">            System.out.printf(<span class="string">&quot;压缩后,msgBodySize：%.2f M,\r\n&quot;</span>, (<span class="type">double</span>) msgBody.getBytes().length / <span class="number">1024</span> / <span class="number">1024</span>);</span><br><span class="line">            compressed = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        MessageBuilder&lt;String&gt; msgBuilder = MessageBuilder.withPayload(msgBody);</span><br><span class="line">        <span class="keyword">if</span> (compressed) &#123;</span><br><span class="line">            msgBuilder.setHeader(COMPRESSED_FLAG, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Message&lt;String&gt; msg = msgBuilder.build();</span><br><span class="line">        <span class="comment">// rocketMqTemplate.syncSend(&quot;Topic&quot;, msg);</span></span><br><span class="line">        System.out.println(<span class="string">&quot;sendMq,msg：&quot;</span> + JSON.toJSONString(msg) + <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">consumeMq</span><span class="params">(Message&lt;String&gt; msg)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msgBody</span> <span class="operator">=</span> msg.getPayload();</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">compressedFlagValue</span> <span class="operator">=</span> (Boolean) msg.getHeaders().get(COMPRESSED_FLAG);</span><br><span class="line">        <span class="keyword">if</span> (BooleanUtils.isTrue(compressedFlagValue)) &#123;</span><br><span class="line">            msgBody = <span class="keyword">new</span> <span class="title class_">String</span>(ZipUtil.unGzip(Base64.decode(msgBody)));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></div></figure></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line">压缩前,msgBodySize：11.13 M</span><br><span class="line">压缩后,msgBodySize：0.32 M</span><br><span class="line">sendMq,msg：&#123;&quot;headers&quot;:&#123;&quot;COMPRESSED&quot;:true,&quot;id&quot;:&quot;c21952f2-1482-f171-cc5c-41d6e7a38c3b&quot;,&quot;timestamp&quot;:1702545864551&#125;,&quot;payload&quot;:&quot;H4sIAAAAAAAAAOz省略&quot;&#125;</span><br></pre></div></figure></td></tr></table></figure><p>结论：可以看到，压缩效果还是不错的</p><h1 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h1><p>最终，公司选择了，方案3：分批发送</p>]]></content>
    
    
    <categories>
      
      <category>生产事故</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RockeMQ</tag>
      
      <tag>生产事务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>项目实战：线程池包装与参数传递</title>
    <link href="/2023/05/22/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%8C%85%E8%A3%85%E4%B8%8E%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92/"/>
    <url>/2023/05/22/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%8C%85%E8%A3%85%E4%B8%8E%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92/</url>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>1、为什么需要对线程池进行包装？</p><p>假设系统中使用了线程池，现在需要对所有执行的任务，前后加一些公共扩展逻辑。此时就需要对Runnable进行包装</p><p>2、线程池中，如何进行ThreadLocal的传递？</p><p>在系统中，我们通常使用ThreadLocal来进行登录会话的传递，如果业务中使用到了线程池，那该如何传递ThreadLocal的值尼？</p><p>不仅仅是登录态，在三方框架中也会遇到这个问题。比如项目中使用了skywalking，在使用线程池时，就需要进行包装处理，否则链路信息就无法传递下去。，</p><h1 id="任务包装"><a href="#任务包装" class="headerlink" title="任务包装"></a>任务包装</h1><p>Spring的<code>ThreadPoolTaskExecutor</code>，提供了对Runnable进行包装的能力。</p><p>使用步骤：</p><p>1、创建任务包装器：</p><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="keyword">import</span> org.springframework.core.task.TaskDecorator;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BizTaskDecorator</span> <span class="keyword">implements</span> <span class="title class_">TaskDecorator</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Runnable <span class="title function_">decorate</span><span class="params">(Runnable runnable)</span> &#123;</span><br><span class="line">        <span class="comment">// 做一些公共操作</span></span><br><span class="line">        doSomeThing();</span><br><span class="line">        <span class="comment">// 还得用skyWalking包装下，不然没法传递traceId</span></span><br><span class="line">        <span class="keyword">return</span> RunnableWrapper.of(() -&gt; runnable.run());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></div></figure></td></tr></table></figure><p>2、创建线程池：</p><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;thread.job.coreSize:3&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer corePoolSize;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;thread.job.maxSize:15&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer maxPoolSize;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;thread.job.queueCap:100&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer queueCap;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;thread.job.keepAliveSec:60&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer keepAliveSec;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TaskExecutor <span class="title function_">taskExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">        executor.setCorePoolSize(corePoolSize); <span class="comment">// 核心线程数</span></span><br><span class="line">        executor.setMaxPoolSize(maxPoolSize);  <span class="comment">// 最大线程数</span></span><br><span class="line">        executor.setQueueCapacity(queueCap);  <span class="comment">// 队列容量</span></span><br><span class="line">        executor.setKeepAliveSeconds(keepAliveSec);  <span class="comment">// 线程活跃时间（秒）</span></span><br><span class="line">        executor.setThreadNamePrefix(<span class="string">&quot;job-&quot;</span>); <span class="comment">// 默认线程名称</span></span><br><span class="line">        executor.setRejectedExecutionHandler(<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy()); <span class="comment">// 拒绝策略</span></span><br><span class="line">        executor.setTaskDecorator(<span class="keyword">new</span> <span class="title class_">BizTaskDecorator</span>()); <span class="comment">// 任务装饰器</span></span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></div></figure></td></tr></table></figure><h1 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h1><p>这里的参数传递，主要指<code>ThreadLocal</code>变量在线程池中的传递。下文以项目中的登录会话传递为例，进行展开</p><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="comment">// 会话管理器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SessionManager</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;SessionBo&gt; threadLocalSession = </span><br><span class="line">        ThreadLocal.withInitial(SessionBo::<span class="keyword">new</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">(LoginTicketBo loginTicketBo, Integer sessionType)</span>&#123;</span><br><span class="line">        <span class="type">SessionBo</span> <span class="variable">sessionBo</span> <span class="operator">=</span> threadLocalSession.get();</span><br><span class="line">        sessionBo.open(loginTicketBo,sessionType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SessionBo</span> <span class="variable">sessionBo</span> <span class="operator">=</span> threadLocalSession.get();</span><br><span class="line">        sessionBo.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SessionBo <span class="title function_">getSessionBo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> threadLocalSession.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></div></figure></td></tr></table></figure><h2 id="显式传递"><a href="#显式传递" class="headerlink" title="显式传递"></a>显式传递</h2><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dataSync</span><span class="params">(ActivityCostChangeMsg req)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;dataSync,req：&#123;&#125;&quot;</span>,JSON.toJSONString(req));</span><br><span class="line">    </span><br><span class="line">    <span class="type">SessionBo</span> <span class="variable">sessionBo</span> <span class="operator">=</span> SessionManager.getSessionBo();</span><br><span class="line">    taskExecutor.execute(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">SessionManager.open(sessionBo.getLoginTicketBo(), sessionBo.getType());</span><br><span class="line">             costChangeService.handleCostChange(req);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">             log.error(<span class="string">&quot;费用管理,数据同步异常,errorMsg：&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></div></figure></td></tr></table></figure><p>缺点：每个使用线程池的地方，都需要先把参数取出，然后再set进去，如果忘记这么做，就会导致ThreadLocal丢失。</p><h2 id="装饰器传递"><a href="#装饰器传递" class="headerlink" title="装饰器传递"></a>装饰器传递</h2><p>使用上文介绍的任务包装，将参数传递逻辑封装到任务装饰器中，业务操作无需感知。</p><p>Session传递装饰器：</p><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SessionTaskDecorator</span> <span class="keyword">implements</span> <span class="title class_">TaskDecorator</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Runnable <span class="title function_">decorate</span><span class="params">(Runnable runnable)</span> &#123;</span><br><span class="line">        <span class="type">SessionBo</span> <span class="variable">sessionBo</span> <span class="operator">=</span> SessionManager.getSessionBo();</span><br><span class="line">        <span class="comment">// 还得用skyWalking包装下，不然没法传递traceId</span></span><br><span class="line">        <span class="keyword">return</span> RunnableWrapper.of(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                SessionManager.open(sessionBo.getLoginTicketBo(), sessionBo.getType());</span><br><span class="line">                runnable.run();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                SessionManager.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></div></figure></td></tr></table></figure><p>业务代码：</p><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dataSync</span><span class="params">(ActivityCostChangeMsg req)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;dataSync,req：&#123;&#125;&quot;</span>,JSON.toJSONString(req));</span><br><span class="line">    </span><br><span class="line">    taskExecutor.execute(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">             costChangeService.handleCostChange(req);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">             log.error(<span class="string">&quot;费用管理,数据同步异常,errorMsg：&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></div></figure></td></tr></table></figure><h2 id="TTL"><a href="#TTL" class="headerlink" title="TTL"></a>TTL</h2><p>还有没有更优雅的办法尼？那就是使用阿里开源的TTL(<code>TransmittableThreadLocal</code>)</p><p>1、会话管理器</p><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="comment">// 会话管理器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SessionManager</span> &#123;</span><br><span class="line">    <span class="comment">// 从ThreadLocal改为TTL</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;SessionBo&gt; threadLocalSession = </span><br><span class="line">        TransmittableThreadLocal.withInitial(SessionBo::<span class="keyword">new</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">(LoginTicketBo loginTicketBo, Integer sessionType)</span>&#123;</span><br><span class="line">        <span class="type">SessionBo</span> <span class="variable">sessionBo</span> <span class="operator">=</span> threadLocalSession.get();</span><br><span class="line">        sessionBo.open(loginTicketBo,sessionType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SessionBo</span> <span class="variable">sessionBo</span> <span class="operator">=</span> threadLocalSession.get();</span><br><span class="line">        sessionBo.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SessionBo <span class="title function_">getSessionBo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> threadLocalSession.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></div></figure></td></tr></table></figure><p>2、任务装饰器</p><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SessionThreadDecorator</span> <span class="keyword">implements</span> <span class="title class_">TaskDecorator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Runnable <span class="title function_">decorate</span><span class="params">(Runnable runnable)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> TtlRunnable.get(runnable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></div></figure></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>项目实战</category>
      
    </categories>
    
    
    <tags>
      
      <tag>线程池</tag>
      
      <tag>ThreadLocal</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>项目实战：Excel批量导入中涉及的技术点</title>
    <link href="/2023/05/01/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9AExcel%E6%89%B9%E9%87%8F%E5%AF%BC%E5%85%A5%E4%B8%AD%E6%B6%89%E5%8F%8A%E7%9A%84%E6%8A%80%E6%9C%AF%E7%82%B9/"/>
    <url>/2023/05/01/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9AExcel%E6%89%B9%E9%87%8F%E5%AF%BC%E5%85%A5%E4%B8%AD%E6%B6%89%E5%8F%8A%E7%9A%84%E6%8A%80%E6%9C%AF%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Excel批量导入是软件开发中常见的需求之一。在许多业务场景下，用户需要将大量数据从Excel中，导入到系统中，以提高工作效率。</p><p>听起来，Excel导入，没什么技术含量。大家会说直接用阿里的<code>EasyExcel</code>，解析Excel文件，插入数据库，就完事了嘛。技术实现的大体流程确实如此。</p><p>不过本文的侧重点并非是使用什么三方库，来实现Excel导入的功能，而是在Excel导入过程中，有哪些技术点，以及需要注意的细节</p><br><p>□ 导入步骤：</p><img src="/2023/05/01/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9AExcel%E6%89%B9%E9%87%8F%E5%AF%BC%E5%85%A5%E4%B8%AD%E6%B6%89%E5%8F%8A%E7%9A%84%E6%8A%80%E6%9C%AF%E7%82%B9/Snipaste_2023-12-23_11-27-04.png" alt="image-20230608161258537" style="zoom:80%;">  <br><p>□ 在Excel批量导入过程中，主要涉及下面的技术点：</p><ol><li><p>使用什么框架来解析Excel：本文不探讨，直接选用阿里的<code>EasyExcel</code>即可</p></li><li><p>Excel文件本身的校验：主要校验文件的格式、大小</p></li><li><p>Excel内的数据校验：</p><figure class="highlight shell"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line">是否必填：首先需要校验，字段是否有值，才能进行后面的校验</span><br><span class="line">数据正确性：枚举字段、日期合法性、业务数据合法性(例：用户id在系统中是否存在)</span><br><span class="line">特殊字符：空格、换行符、标点符号的半角-圆角</span><br><span class="line">自身数据重复：Excel中，本身可能就存在重复数据，需要进行检测</span><br><span class="line">与数据库已存在数据校验：</span><br></pre></div></figure></td></tr></table></figure></li></ol><p>下面详细展开：</p><h1 id="本身校验"><a href="#本身校验" class="headerlink" title="本身校验"></a>本身校验</h1><p>1、文件格式：首先需要检测上传的文件是否是Excel文件，通常可以使用后缀名来判断</p><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isExcelFile</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fileName.toLowerCase().endsWith(<span class="string">&quot;.xls&quot;</span>) </span><br><span class="line">        || fileName.toLowerCase().endsWith(<span class="string">&quot;.xlsx&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></div></figure></td></tr></table></figure><p>2、文件大小：上传是1个比较耗费资源的操作，即使产品需求层面未限制文件大小、数据条数，也需要做兜底的控制</p><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="comment">// 出于系统保护,本场景1M已经有3万+数据量了 </span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">EXCEL_SIZE_LIMIT</span> <span class="operator">=</span> <span class="number">1024</span>; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">checkExcelSize</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">    AssertUtil.notNull(file, <span class="string">&quot;数据导入,上传文件为空&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">fileKb</span> <span class="operator">=</span> file.getSize() / <span class="number">1024</span>; </span><br><span class="line">    AssertUtil.isTrue(fileKb &lt;= <span class="number">1024</span>, <span class="string">&quot;数据导入,仅支持1M以下的Excel文件&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></div></figure></td></tr></table></figure><h1 id="必填校验"><a href="#必填校验" class="headerlink" title="必填校验"></a>必填校验</h1><p>根据配置(数据库、配置文件)，判断某些字段是否必填，如果是必填，但值为空，将不允许上传</p><p>具体判断有以下两种方式：</p><p>1、直接if-else：</p><p>优点：最简单、直观</p><p>缺点：扩展性差，如果后续迭代，要增加导入的字段、修改字段名，将修改校验代码，不符合开闭原则</p><img src="/2023/05/01/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9AExcel%E6%89%B9%E9%87%8F%E5%AF%BC%E5%85%A5%E4%B8%AD%E6%B6%89%E5%8F%8A%E7%9A%84%E6%8A%80%E6%9C%AF%E7%82%B9/Snipaste_2023-12-12_14-01-47.png" alt="image-20230608161258537" style="zoom:80%;"> <figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExcelDto</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户名&quot;, index = 0)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;性别&quot;, index = 1)</span></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;家庭住址&quot;, index = 2)</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">&#125;</span><br></pre></div></figure></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查字段必填</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> excelDtoList</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mustFillFields  必填的字段：可以从数据库、配置中加载</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">checkMustFill</span><span class="params">(List&lt;ExcelDto&gt; excelDtoList,</span></span><br><span class="line"><span class="params">                     Set&lt;String&gt; mustFillFields)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (ExcelDto excelDto : excelDtoList) &#123;</span><br><span class="line">        <span class="keyword">if</span>(mustFillFields.contains(<span class="string">&quot;name&quot;</span>)) &#123;</span><br><span class="line">        AssertUtil.notBlank(execlDto.getName(), <span class="string">&quot;name不能为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(mustFillFields.contains(<span class="string">&quot;sex&quot;</span>)) &#123;</span><br><span class="line">        AssertUtil.notBlank(execlDto.getSex(), <span class="string">&quot;sex不能为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ...其他字段</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></div></figure></td></tr></table></figure><p>可以看到，这个代码是非常不优雅的，而且如果以后别人维护的时候不知道，把某个字段重命名了，那直接就炸了</p><p>2、反射：使用反射获取字段列表，进行判断</p><p>优点：如果增加了必填字段，仅需修改配置，校验逻辑无需修改</p><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查字段必填</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> excelDtoList</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mustFillFields  必填的字段：可以从数据库、配置中加载</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkMustFill</span><span class="params">(List&lt;ExcelDto&gt; excelDtoList,</span></span><br><span class="line"><span class="params">                          Set&lt;String&gt; mustFillFields)</span> &#123;</span><br><span class="line">    Field[] fields = datum.getClass().getDeclaredFields();</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!field.isAnnotationPresent(ExcelProperty.class)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断是否是必填字段</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fieldName</span> <span class="operator">=</span> field.getName();</span><br><span class="line">        <span class="keyword">if</span> (!mustFillFields.contains(fieldName)) &#123; </span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">FieldValue</span> <span class="operator">=</span> field.get(datum).toString());</span><br><span class="line">        AssertUtil.notBlank(FieldValue, fieldName + <span class="string">&quot;不能为空&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></div></figure></td></tr></table></figure><h1 id="数据正确性校验"><a href="#数据正确性校验" class="headerlink" title="数据正确性校验"></a>数据正确性校验</h1><ul><li><p>枚举：这个就不必详谈，根据各自的系统枚举，进行校验即可</p><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="type">boolean</span> <span class="variable">typeLegal</span> <span class="operator">=</span> ActivityTypeEnum.isBusinessGroup(type);</span><br><span class="line">AssertUtil.isTrue(b, <span class="string">&quot;活动线id非B端,活动线id：&quot;</span> + type);</span><br></pre></div></figure></td></tr></table></figure></li><li><p>时间校验：这里提一下，除了时间格式；如果涉及生效时间、失效时间，需要校验【生效时间&lt;&#x3D;失效时间】</p><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="type">boolean</span> <span class="variable">dataLegal</span> <span class="operator">=</span> effectiveTime.before(expireTime)</span><br><span class="line">AssertUtil.isTrue(dataLegal, <span class="string">&quot;生效时间&gt;=失效时间)&quot;</span>, excelLineIndex);    </span><br></pre></div></figure></td></tr></table></figure></li><li><p>业务数据正确性：</p><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line">AssertUtil.notNull(getUserById(userId), <span class="string">&quot;用户id不存在&quot;</span>);  </span><br></pre></div></figure></td></tr></table></figure></li></ul><h1 id="特殊字符处理"><a href="#特殊字符处理" class="headerlink" title="特殊字符处理"></a>特殊字符处理</h1><p>常见的特殊字符有：空格、换行符、Tab制表符、标点符号的半角-圆角转换</p><p>思路：同样是利用发射，获取所有属性值，进行特殊字符判断，并处理</p><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="comment">// 逗号</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">errorComma</span> <span class="operator">=</span> <span class="string">&quot;，&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">correctComma</span> <span class="operator">=</span> <span class="string">&quot;,&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 句号</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">errorPeriod</span> <span class="operator">=</span> <span class="string">&quot;。&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">correctPeriod</span> <span class="operator">=</span> <span class="string">&quot;.&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 冒号</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">errorSemicolon</span> <span class="operator">=</span> <span class="string">&quot;：&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">correctSemicolon</span> <span class="operator">=</span> <span class="string">&quot;:&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双引号</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">errorDoubleQuotesRight</span> <span class="operator">=</span> <span class="string">&quot;”&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">errorDoubleQuotesLeft</span> <span class="operator">=</span> <span class="string">&quot;“&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">correctDoubleQuotes</span> <span class="operator">=</span> <span class="string">&quot;\&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单引号</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">errorSingleQuotesRight</span> <span class="operator">=</span> <span class="string">&quot;’&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">errorSingleQuotesLeft</span> <span class="operator">=</span> <span class="string">&quot;‘&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">correctSingleQuotes</span> <span class="operator">=</span> <span class="string">&quot;\&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 括号</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">errorBracketLeft</span> <span class="operator">=</span> <span class="string">&quot;（&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">errorBracketRight</span> <span class="operator">=</span> <span class="string">&quot;）&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">correctBracketRight</span> <span class="operator">=</span> <span class="string">&quot;)&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">correctBracketLeft</span> <span class="operator">=</span> <span class="string">&quot;(&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 问号</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">errQuestionMark</span> <span class="operator">=</span> <span class="string">&quot;？&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">correctQuestionMark</span> <span class="operator">=</span> <span class="string">&quot;?&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 感叹号</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">errExclamationMark</span> <span class="operator">=</span> <span class="string">&quot;！&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">correctExclamationMark</span> <span class="operator">=</span> <span class="string">&quot;!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">replaceSymbol</span><span class="params">(LabelCopyDTO labelCopy)</span> <span class="keyword">throws</span> IllegalAccessException &#123;</span><br><span class="line">    Field[] declaredFields = labelCopy.getClass().getDeclaredFields();</span><br><span class="line">    <span class="keyword">for</span> (Field field : declaredFields) &#123;</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (field.get(labelCopy) <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> (String) field.get(labelCopy);</span><br><span class="line">            <span class="type">String</span> <span class="variable">newValue</span> <span class="operator">=</span> <span class="built_in">this</span>.replaceSymbol(value);</span><br><span class="line">            field.set(labelCopy, newValue);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">replaceSymbol</span><span class="params">(String value)</span> &#123;</span><br><span class="line">    <span class="comment">// 换行</span></span><br><span class="line">    value = value.trim()</span><br><span class="line">        .replaceAll(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;&quot;</span>) <span class="comment">// window系统 换行</span></span><br><span class="line">        .replaceAll(<span class="string">&quot;\r&quot;</span>, <span class="string">&quot;&quot;</span>) <span class="comment">// mac系统 换行</span></span><br><span class="line">        .replaceAll(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>); <span class="comment">// unix系统 换行</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Tab</span></span><br><span class="line">    <span class="keyword">if</span> (value.startsWith(<span class="string">&quot;\t&quot;</span>) || value.endsWith(<span class="string">&quot;\t&quot;</span>)) &#123;</span><br><span class="line">        value = value.replaceAll(<span class="string">&quot;\t&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 特殊空格,mysql ——&gt; char(194)</span></span><br><span class="line">    <span class="comment">// 如果在开头和末尾，则去掉</span></span><br><span class="line">    <span class="comment">// 如果在中间，则替换为普通空格</span></span><br><span class="line">    <span class="keyword">if</span> (value.contains(<span class="string">&quot;\u00A0&quot;</span>)) &#123;</span><br><span class="line">        value = value.replace(<span class="string">&quot;\u00A0&quot;</span>, <span class="string">&quot; &quot;</span>)</span><br><span class="line">            .trim();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 逗号</span></span><br><span class="line">    <span class="keyword">if</span> (value.contains(errorComma)) &#123;</span><br><span class="line">        value = value.replace(errorComma, correctComma);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 句号</span></span><br><span class="line">    <span class="keyword">if</span> (value.contains(errorPeriod)) &#123;</span><br><span class="line">        value = value.replace(errorPeriod, correctPeriod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 冒号</span></span><br><span class="line">    <span class="keyword">if</span> (value.contains(errorSemicolon)) &#123;</span><br><span class="line">        value = value.replace(errorSemicolon, correctSemicolon);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 双引号</span></span><br><span class="line">    <span class="keyword">if</span> (value.contains(errorDoubleQuotesLeft)) &#123;</span><br><span class="line">        value = value.replace(errorDoubleQuotesLeft, correctDoubleQuotes);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (value.contains(errorDoubleQuotesRight)) &#123;</span><br><span class="line">        value = value.replace(errorDoubleQuotesRight, correctDoubleQuotes);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 单引号</span></span><br><span class="line">    <span class="keyword">if</span> (value.contains(errorSingleQuotesLeft)) &#123;</span><br><span class="line">        value = value.replace(errorSingleQuotesLeft, correctSingleQuotes);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (value.contains(errorSingleQuotesRight)) &#123;</span><br><span class="line">        value = value.replace(errorSingleQuotesRight, correctSingleQuotes);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 括号</span></span><br><span class="line">    <span class="keyword">if</span> (value.contains(errorBracketLeft)) &#123;</span><br><span class="line">        value = value.replace(errorBracketLeft, correctBracketLeft);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (value.contains(errorBracketRight)) &#123;</span><br><span class="line">        value = value.replace(errorBracketRight, correctBracketRight);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 问号</span></span><br><span class="line">    <span class="keyword">if</span> (value.contains(errQuestionMark)) &#123;</span><br><span class="line">        value = value.replace(errQuestionMark, correctQuestionMark);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 感叹号</span></span><br><span class="line">    <span class="keyword">if</span> (value.contains(errExclamationMark)) &#123;</span><br><span class="line">        value = value.replace(errExclamationMark, correctExclamationMark);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></div></figure></td></tr></table></figure><h1 id="自身数据重复校验"><a href="#自身数据重复校验" class="headerlink" title="自身数据重复校验"></a>自身数据重复校验</h1><p>可以利用Map，逐行判断，若数据在Map中已存在，则说明重复</p><p>注意点：RepeatKey，需要自行定义，哪些字段相同，才算是重复的数据</p><img src="/2023/05/01/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9AExcel%E6%89%B9%E9%87%8F%E5%AF%BC%E5%85%A5%E4%B8%AD%E6%B6%89%E5%8F%8A%E7%9A%84%E6%8A%80%E6%9C%AF%E7%82%B9/Snipaste_2023-12-12_14-01-18.png" alt="image-20230608161258537" style="zoom:80%;">  <figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExcelDto</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户名&quot;, index = 0)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;性别&quot;, index = 1)</span></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;家庭住址&quot;, index = 2)</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">buildRepeatCheckKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;%s_%s_%s&quot;</span>,name, sex, awardId, address);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></div></figure></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">checkExcelRepeat</span><span class="params">(List&lt;ExcelDto&gt; excelDtoList)</span> &#123;</span><br><span class="line">    Map&lt;String, Integer&gt; elementMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(excelDtoList.size());</span><br><span class="line">    <span class="type">int</span> <span class="variable">excelLineIndex</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (ExcelDto excelDto : excelDtoList) &#123;</span><br><span class="line">        excelLineIndex++;</span><br><span class="line">        checkExcelRepeat(excelDto, elementMap, excelLineIndex)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">checkExcelRepeat</span><span class="params">(ExcelDto data, </span></span><br><span class="line"><span class="params">                              Map&lt;String, Integer&gt; elementMap,</span></span><br><span class="line"><span class="params">                              <span class="type">int</span> lineIndex)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> data.buildRepeatCheckKey();</span><br><span class="line">    <span class="keyword">if</span> (!elementMap.containsKey(key)) &#123;</span><br><span class="line">        elementMap.put(key, lineIndex);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">repateFormat</span> <span class="operator">=</span> <span class="string">&quot;第%s行与第%s行重复&quot;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">errorMsg</span> <span class="operator">=</span> String.format(repateFormat, </span><br><span class="line">                                        lineIndex, </span><br><span class="line">                                        elementMap.get(key));</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BizException</span>(errorMsg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></div></figure></td></tr></table></figure><h1 id="数据已存在校验"><a href="#数据已存在校验" class="headerlink" title="数据已存在校验"></a>数据已存在校验</h1><p>这个，也不展开说，根据各自的业务，针对Excel导入的数据，与系统中已存在的数据，进行校验即可</p><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">checkDbExistData</span><span class="params">(List&lt;ExcelDto&gt; excelDtoList)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (ExcelDto excelDto : excelDtoList) &#123;</span><br><span class="line">       <span class="type">DataDto</span> <span class="variable">existData</span> <span class="operator">=</span> getDataFromDByCondition(excelDto);</span><br><span class="line">       AssertUtil.isNull(dbExistData, <span class="string">&quot;该数据,系统中已存在&quot;</span>); </span><br><span class="line">       log.warn(<span class="string">&quot;该数据在系统中已存在,existDataId：&#123;&#125;&quot;</span>, existData.getId())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></div></figure></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>项目实战</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Excel</tag>
      
      <tag>反射</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>项目实战：接口并发控制</title>
    <link href="/2023/04/15/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/"/>
    <url>/2023/04/15/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在项目中，对于有些敏感接口，是需要限制请求并发数的。这和我们熟悉的<strong>接口防重复点击</strong>又有所不同</p><ol><li><p>接口防重复点击：对于同1参数(<code>订单id、用户id...</code>)的请求，在x秒内，只能请求1次。常用于<code>抽奖、秒杀</code>等场景，这个不是本文要讲述的内容</p></li><li><p>接口并发数限制：对于同1接口，同时只允许x个请求同时访问。常用于比较耗费资源的接口，例如：</p><p>下载Excel：此类接口，一般是是查询数据，生成临时文件，然后上传至OOS，将OOS的url返回</p><figure class="highlight plaintext"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line">一般此类接口查询的数据量都比较大，若并发数过大：</span><br><span class="line">1、OOM风险：查询大量数据，可能导致服务OOM</span><br><span class="line">2、服务器带宽被打满：大量Excel上传至OOS，可能将服务器网络带宽打满，导致其余功能无法正常响应</span><br></pre></div></figure></td></tr></table></figure></li></ol><br><p>下文，我们以1个<code>对账单下载接口</code>的并发控制，来展示几种实现方式。先贴出无任何并发数控制的接口代码：</p><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="comment">// Controller</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;下载客户对账单&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/down&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ApiResult&lt;CheckAccountDownVo&gt; <span class="title function_">down</span><span class="params">(<span class="meta">@Validated</span> <span class="meta">@RequestBody</span> CheckAccountDownReq req)</span> &#123;</span><br><span class="line">    <span class="type">CheckAccountDownVo</span> <span class="variable">result</span> <span class="operator">=</span> checkAccountDownHistoryService.checkAccountDown(req);</span><br><span class="line">    <span class="keyword">return</span> ApiResult.success(result);</span><br><span class="line">&#125;</span><br></pre></div></figure></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="comment">// Service</span></span><br><span class="line"><span class="meta">@RedisLock(value = &quot;&#x27;checkAccountDown&#x27; + #req.pointId&quot;, reentrant = false)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> CheckAccountDownVo <span class="title function_">checkAccountDown</span><span class="params">(CheckAccountDownReq req)</span> &#123;</span><br><span class="line">    <span class="type">CheckAccountDownVo</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CheckAccountDownVo</span>();</span><br><span class="line">    <span class="keyword">if</span> (checkAlreadyDown(req, result)) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 生成Excel对账单，并返回OOS的url地址</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> customerBillService.generateCustomerBill(customerBillReq);</span><br><span class="line">    result.setUrl(url);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></div></figure></td></tr></table></figure><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>在使用<code>SpringCloud</code>的分布式项目中，想要做到这一点很简单，只需要使用<code>Hystrix</code>来实现即可，但在非分布式项目中也需要进行接口并发控制，又不想依赖<code>Hystrix</code>，又该怎么做尼？</p><p>下面给出了几种实现方式：</p><h2 id="Hystrix注解"><a href="#Hystrix注解" class="headerlink" title="Hystrix注解"></a>Hystrix注解</h2><p>基于Hystrix注解的方式，使用起来非常简单，只需要引入pom依赖，在对应接口增加注解即可</p><p>1、pom依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></div></figure></td></tr></table></figure><p>2、增加注解：</p><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> com.netflix.hystrix.HystrixCommandProperties</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> com.netflix.hystrix.contrib.javanica.conf.HystrixPropertiesManager</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> com.netflix.hystrix.HystrixThreadPoolProperties</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@HystrixCommand(commandProperties = &#123;</span></span><br><span class="line"><span class="meta">   // 隔离策略：线程池</span></span><br><span class="line"><span class="meta">   @HystrixProperty(name = &quot;execution.isolation.strategy&quot;, value = &quot;THREAD&quot;),</span></span><br><span class="line"><span class="meta">   @HystrixProperty(name = &quot;hystrix.threadpool.coreSize&quot;, value = &quot;3&quot;),</span></span><br><span class="line"><span class="meta">   @HystrixProperty(name = &quot;hystrix.threadpool.maximumSize&quot;, value = &quot;3&quot;),</span></span><br><span class="line"><span class="meta">            </span></span><br><span class="line"><span class="meta">   // 隔离策略：信号量</span></span><br><span class="line"><span class="meta">   // @HystrixProperty(name = &quot;execution.isolation.strategy&quot;, value = &quot;SEMAPHORE&quot;),</span></span><br><span class="line"><span class="meta">   // @HystrixProperty(name = &quot;execution.isolation.semaphore.maxConcurrentRequests&quot;, value = &quot;3&quot;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;下载客户对账单&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/down&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ApiResult&lt;CheckAccountDownVo&gt; <span class="title function_">down</span><span class="params">(<span class="meta">@Validated</span> <span class="meta">@RequestBody</span> CheckAccountDownReq req)</span> &#123;</span><br><span class="line">    <span class="type">CheckAccountDownVo</span> <span class="variable">result</span> <span class="operator">=</span> checkAccountDownHistoryService.checkAccountDown(req);</span><br><span class="line">    <span class="keyword">return</span> ApiResult.success(result);</span><br><span class="line">&#125;</span><br></pre></div></figure></td></tr></table></figure><h2 id="Hystrix命令模式"><a href="#Hystrix命令模式" class="headerlink" title="Hystrix命令模式"></a>Hystrix命令模式</h2><p>但是基于<code>Hystrix注解</code>的方式也有缺陷，必须要依赖上述pom。</p><p>如果项目中使用了<code>OpenFeign</code>，又不想增加额外的依赖，那可以基于<code>Hystrix命令模式</code>，来实现接口并发控制。因为<code>OpenFeign</code>集成了<code>hystrix-core</code>，而<code>Hystrix</code>命令模式，仅仅依赖<code>hystrix-core</code>就可以实现</p><img src="/2023/04/15/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/Snipaste_2023-09-22_14-11-12.png" alt="Snipaste_2023-09-22_14-11-12" style="zoom: 60%;">   <p><b> </b></p><p><b> </b></p><p><b> </b></p><p>□ 步骤：</p><ol><li><p>编写<code>Hystrix命令类</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.netflix.hystrix.HystrixCommand;</span><br><span class="line"><span class="keyword">import</span> com.netflix.hystrix.HystrixCommandGroupKey;</span><br><span class="line"><span class="keyword">import</span> com.netflix.hystrix.HystrixCommandProperties;</span><br><span class="line"><span class="keyword">import</span> com.netflix.hystrix.exception.HystrixBadRequestException;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户对账单限流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerBillDownHystrixCommand</span> <span class="keyword">extends</span> <span class="title class_">HystrixCommand</span>&lt;String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LIMIT_MSG</span> <span class="operator">=</span> <span class="string">&quot;当前下载人数过多,请稍后重试&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CheckAccountDownReq req;</span><br><span class="line">    <span class="keyword">private</span> V2ContractTypeEnum contractTypeEnum;</span><br><span class="line">    <span class="keyword">private</span> CustomerBillService billService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomerBillDownHystrixCommand</span><span class="params">(CheckAccountDownReq req,</span></span><br><span class="line"><span class="params">                                          V2ContractTypeEnum contractTypeEnum, </span></span><br><span class="line"><span class="params">                                          CustomerBillService service)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class="string">&quot;customerBillDown&quot;</span>))</span><br><span class="line">                .andCommandPropertiesDefaults(</span><br><span class="line">                        HystrixCommandProperties.Setter()</span><br><span class="line">                                 <span class="comment">// 信号量隔离 </span></span><br><span class="line">                                .withExecutionIsolationStrategy(</span><br><span class="line">                                    HystrixCommandProperties.ExecutionIsolationStrategy.SEMAPHORE )</span><br><span class="line">                                .withExecutionIsolationSemaphoreMaxConcurrentRequests(<span class="number">5</span>)</span><br><span class="line">                                .withExecutionTimeoutEnabled(<span class="literal">false</span>))</span><br><span class="line">        );</span><br><span class="line">        <span class="built_in">this</span>.req = req;</span><br><span class="line">        <span class="built_in">this</span>.contractTypeEnum = contractTypeEnum;</span><br><span class="line">        <span class="built_in">this</span>.service = service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;CustomerBillDownHystrixCommand run, req：&#123;&#125;&quot;</span>, JSON.toJSONString(req));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> billService.generateCustomerBill(req);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ApiException e) &#123;</span><br><span class="line">            <span class="comment">// 如果不包装为HystrixBadRequestException抛出，就会走到fallback()里，从而吐掉了真实的异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">HystrixBadRequestException</span>(e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;CustomerBillDownHystrixCommand run error,errorMsg：&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">HystrixBadRequestException</span>(<span class="string">&quot;系统繁忙，请稍后重试...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 达到限流条件后，返回的值</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String <span class="title function_">getFallback</span><span class="params">()</span> &#123;</span><br><span class="line">        log.error(<span class="string">&quot;下载对账单达到并发限制, req：&#123;&#125;&quot;</span>, JSON.toJSONString(req));</span><br><span class="line">        <span class="keyword">return</span> LIMIT_MSG;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></div></figure></td></tr></table></figure></li><li><p>执行<code>HystrixCommand</code>命令：</p><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="comment">// Service</span></span><br><span class="line"><span class="meta">@RedisLock(value = &quot;&#x27;checkAccountDown&#x27; + #req.pointId&quot;, reentrant = false)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> CheckAccountDownVo <span class="title function_">checkAccountDown</span><span class="params">(CheckAccountDownReq req)</span> &#123;</span><br><span class="line">    <span class="type">CheckAccountDownVo</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CheckAccountDownVo</span>();</span><br><span class="line">    <span class="keyword">if</span> (checkAlreadyDown(req, result)) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建Hystrix命令对象</span></span><br><span class="line">    <span class="type">CustomerBillDownHystrixCommand</span> <span class="variable">hystrixCommand</span> <span class="operator">=</span> </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">CustomerBillDownHystrixCommand</span>(req, contractTypeEnum, customerBillService);</span><br><span class="line">    <span class="comment">// 执行Hystrix命令</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> hystrixCommand.execute();</span><br><span class="line">    result.setUrl(url);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></div></figure></td></tr></table></figure></li></ol><h2 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h2><p>假设是单体项目，且既不想引入<code>Hystrix</code>，也不想引入<code>OpenFeign</code>，那可以使用JDK的<code>Semaphore</code>，显式编码实现接口限流</p><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Semaphore</span> <span class="variable">excelDownLimit</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiOperation(&quot;下载客户对账单&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/down&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ApiResult&lt;CheckAccountDownVo&gt; <span class="title function_">down</span><span class="params">(<span class="meta">@Validated</span> <span class="meta">@RequestBody</span> CheckAccountDownReq req)</span> &#123;   </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!excelDownLimit.tryAcquire()) &#123;</span><br><span class="line">            <span class="keyword">return</span> ApiResult.fail(<span class="string">&quot;当前下载人数过多,请稍后重试&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">CheckAccountDownVo</span> <span class="variable">result</span> <span class="operator">=</span> checkAccountDownHistoryService.checkAccountDown(req);</span><br><span class="line">        <span class="keyword">return</span> ApiResult.success(result);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        excelDownLimit.release();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></div></figure></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>项目实战</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hystrix</tag>
      
      <tag>Semaphore</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>项目实战：分布式系统-失效缓存</title>
    <link href="/2023/03/25/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F-%E5%A4%B1%E6%95%88%E7%BC%93%E5%AD%98/"/>
    <url>/2023/03/25/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F-%E5%A4%B1%E6%95%88%E7%BC%93%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在分布式系统中，为了提高性能，除了使用集中式缓存(Redis等)外，通常还会使用java内存缓存，来存储热点数据、配置数据等。</p><p>使用了缓存，就存在数据一致性的问题，本文不详细论述缓存一致性的解决方案，而是以1个特殊的业务场景，展开说明如何失效分布式系统中的内存缓存数据。</p><p>需求：</p><p>​ 由于公司是白酒业务，sku、spu相对固定，平常要上架1个新品，销售、运营、分润等策略都可能不一样，整个链路需要开发策略进行支持。</p><p>​ 但由于特殊原因，需要紧急上架1款sku(非常规调整，属于为了满足某种需求的，临时过度解决方案)。上架后需要立即生效，但是由于很多后端服务都使用了内存缓存，缓存了sku-spu的映射关系，且在白天无法通过重启服务解决，因此需要1种方式，在不重启应用的前提下，清除内存缓存中的指定缓存条目。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>难题：如果是单个节点，那好办，直接写个接口，清除内存缓存中的条目即可。如果是多节点，怎么办尼？问题就在于怎么把清除缓存的请求广播到所有的节点。有以下几种解决思路。</p><h2 id="Xxl-Job"><a href="#Xxl-Job" class="headerlink" title="Xxl-Job"></a>Xxl-Job</h2><p>由于xxl-job是支持分布式多节点注册，并且进行定时任务的广播调度。因此可以使用xxl-job来实现这个功能。</p><p>1、编写1个任务执行器，失效内存缓存指定条目，</p><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="meta">@XxlJob(&quot;clearMemoryCache&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ReturnT&lt;String&gt; <span class="title function_">clearMemoryCache</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 不同的内存缓存框架都会提供对应方法，自行封装调用即可</span></span><br><span class="line">    localCache.invalidCache();</span><br><span class="line">    <span class="keyword">return</span> ReturnT.SUCCESS;</span><br><span class="line">&#125;</span><br></pre></div></figure></td></tr></table></figure><p>2、配置1个xxl-job定时任务：路由策略选择【分片广播】，手动触发任务执行，即可清除所有节点的内存缓存</p><img src="/2023/03/25/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F-%E5%A4%B1%E6%95%88%E7%BC%93%E5%AD%98/Snipaste_2023-12-13_13-04-14.png" alt="Snipaste_2023-12-13_13-04-14"><p> </p><h2 id="Nacos-配置中心"><a href="#Nacos-配置中心" class="headerlink" title="Nacos-配置中心"></a>Nacos-配置中心</h2><p>如果项目使用了Nacos作为配置中心，可以通过Nacos配置刷新监听器，来实现多节点感知</p><p>1、Nacos配置文件内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="attr">clear-cache:</span></span><br><span class="line">  <span class="attr">skuId:</span> <span class="number">33</span>  </span><br></pre></div></figure></td></tr></table></figure><p>2、配置刷新监听器：</p><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="keyword">package</span> com.mdw.cloud.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.context.config.annotation.RefreshScope;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.context.environment.EnvironmentChangeEvent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.event.EventListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.Environment;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> * 监听Nacos配置刷新事件：</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 源码流程</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> com.alibaba.cloud.nacos.refresh.NacosContextRefresher#onApplicationEvent</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@see</span> org.springframework.cloud.endpoint.event.RefreshEventListener#onApplicationEvent</span></span><br><span class="line"><span class="comment"> *          # 配置改变刷新配置属性</span></span><br><span class="line"><span class="comment"> *          <span class="doctag">@see</span> org.springframework.cloud.context.refresh.ContextRefresher#refreshEnvironment()</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfigListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment environment;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CLEAR_CACHE_CONFIG_KEY</span> <span class="operator">=</span> <span class="string">&quot;clear-cache.skuId&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clearMemoryCacheEventHandle</span><span class="params">(EnvironmentChangeEvent event)</span> &#123;</span><br><span class="line">        <span class="comment">// 检查目标配置是否变化</span></span><br><span class="line">        <span class="keyword">if</span> (event.getKeys().contains(CLEAR_CACHE_CONFIG_KEY)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[&quot;</span> + CLEAR_CACHE_CONFIG_KEY + <span class="string">&quot;]配置发生了变更&quot;</span>);</span><br><span class="line">            <span class="comment">// 获取配置变更项的值</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">newValue</span> <span class="operator">=</span> environment.getProperty(CLEAR_CACHE_CONFIG_KEY);</span><br><span class="line">            System.out.println(<span class="string">&quot;newValue: &quot;</span> + newValue);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 调用服务内部的清除缓存方法</span></span><br><span class="line">            clearMemoryCache(...)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//---当修改nacos配置时，监听器打印：</span></span><br><span class="line">[clear-cache.skuId]配置发生了变更</span><br><span class="line">newValue: <span class="number">33</span></span><br></pre></div></figure></td></tr></table></figure><h2 id="Nacos-注册中心"><a href="#Nacos-注册中心" class="headerlink" title="Nacos-注册中心"></a>Nacos-注册中心</h2><p>如果项目使用了Nacos作为注册中心，可以通过注册中心，拿到服务的所有注册节点，实现广播调度</p><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/special&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpecialController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LocalCache localCache;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;失效缓存&quot;, hidden = true)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/clearMemoryCache&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResult&lt;Void&gt; <span class="title function_">clearMemoryCache</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 不同的内存缓存框架都会提供对应方法，自行封装调用即可</span></span><br><span class="line">        localCache.invalidCache(); </span><br><span class="line">        <span class="keyword">return</span> ApiResult.success();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;失效所有节点的缓存&quot;, hidden = true)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/clearMemoryCacheAllNode&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResult&lt;String&gt; <span class="title function_">clearMemoryCacheAllNode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> specialService.invalidCacheAllNode();</span><br><span class="line">        <span class="keyword">return</span> ApiResult.success(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></div></figure></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.ServiceInstance;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.DiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpecialServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SpecialService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 失效所有节点的缓存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">invalidCacheAllNode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">serviceName</span> <span class="operator">=</span> applicationContext.getEnvironment()</span><br><span class="line">                .getProperty(<span class="string">&quot;spring.application.name&quot;</span>);</span><br><span class="line">            List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(serviceName);</span><br><span class="line">            <span class="keyword">for</span> (ServiceInstance instance : instances) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> UrlBuilder.create().setScheme(instance.getScheme())</span><br><span class="line">                        .setHost(instance.getHost())</span><br><span class="line">                        .setPort(instance.getPort())</span><br><span class="line">                        .setPath(UrlPath.of(<span class="string">&quot;/special/clearMemoryCache&quot;</span>, Charset.defaultCharset()))</span><br><span class="line">                        .toString();</span><br><span class="line">                <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> restTemplate.getForObject(url, String.class);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;SUCCESS&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;invalidCacheAllNode异常,errorMsg：&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;FAIL&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></div></figure></td></tr></table></figure><h2 id="MQ"><a href="#MQ" class="headerlink" title="MQ"></a>MQ</h2><p>还可以利用MQ的广播，来实现此功能，本文就不展开描述了</p>]]></content>
    
    
    <categories>
      
      <category>项目实战</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hystrix</tag>
      
      <tag>Semaphore</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>项目实战：优雅的进行Feign本地调试</title>
    <link href="/2023/03/12/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E4%BC%98%E9%9B%85%E7%9A%84%E8%BF%9B%E8%A1%8CFeign%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95/"/>
    <url>/2023/03/12/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E4%BC%98%E9%9B%85%E7%9A%84%E8%BF%9B%E8%A1%8CFeign%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在使用<code>SpringCloud</code>全家桶作为分布式框架的分布式系统中，通常使用<code>Feign</code>进行服务间通信。1个复杂的业务流程，有时可能需要数十次的Feign远程调用，那么在开发阶段，如何更优雅的进行本地调试，来进行业务流程串通尼</p><h1 id="注册中心"><a href="#注册中心" class="headerlink" title="注册中心"></a>注册中心</h1><p>如果公司有条件，<code>dev、test</code>都搭建的有完整的环境，那么开发完成后，需要进行自测、联调时，依赖方只需要发布到<code>dev</code>环境，并且注册到注册中心，我们在本地启动自己的服务，也注册到dev环境，就可以实现远程调用的联调</p><p>□ 优点：简单，无需特殊的配置，直接通过注册中心调用即可</p><p>□ 缺点：</p><ol><li>需要有多套完善的环境，部分公司可能没有<code>dev</code>环境，或者<code>dev</code>环境不完善，部分服务缺失，导致流程串不起来</li><li>不够灵活，有时候可能需要在本地调用，其他服务<code>test、prod</code>环境的接口，通过注册中心无法实现</li></ol><h1 id="url"><a href="#url" class="headerlink" title="url"></a>url</h1><p>使用<code>@FeignClient</code>的<code>url</code>参数，即可随意指定调用的接口路径，从而避免注册中心调用</p><p>一般用法：在本地联调时，我们会指定<code>@FeignClient</code>的<code>url</code>参数，然后再提测、上线时，再把<code>url</code>参数去掉</p><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;irs-channel&quot;, contextId = &quot;V2ContractApi&quot;)</span></span><br><span class="line"><span class="comment">//@FeignClient(value = &quot;irs-channel&quot;, </span></span><br><span class="line"><span class="comment">//        contextId = &quot;V2ContractApi&quot;,</span></span><br><span class="line"><span class="comment">//        url = &quot;http://gateway.test.tanjiu.cn/channel&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">V2ContractApi</span> <span class="keyword">extends</span> <span class="title class_">ContractQueryApi</span> &#123;</span><br><span class="line">&#125;</span><br></pre></div></figure></td></tr></table></figure><p>问题：看起来很完美、很灵活。但是很容易引发生产事故，公司就曾经发生过，因为忘记注释掉自测的<code>url</code>参数，导致上了生产环境后，发生接口调不通的事故</p><h1 id="SpringBoot注解"><a href="#SpringBoot注解" class="headerlink" title="SpringBoot注解"></a>SpringBoot注解</h1><p>针对<code>url参数</code>的缺点，我们可以使用<code>SpringBoot</code>注解进行优化，避免引发生产事故</p><h2 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h2><p>一般依赖其他服务提供Feign接口时，有如下步骤：</p><ol><li><p>引入其他服务的<code>Feign</code>接口定义jar包</p><img src="/2023/03/12/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E4%BC%98%E9%9B%85%E7%9A%84%E8%BF%9B%E8%A1%8CFeign%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95/image-20230612163235708.png" alt="image-20230612163235708" style="zoom: 67%;"> <p><b></b></p><img src="/2023/03/12/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E4%BC%98%E9%9B%85%E7%9A%84%E8%BF%9B%E8%A1%8CFeign%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95/image-20230612163548996.png" alt="image-20230612163548996" style="zoom:80%;"></li><li><p>实现Feign接口：添加<code>@FeignClient</code>注解 （这里其实不是实现，而是继承，但Feign会根据注解生成代理实现）</p><img src="/2023/03/12/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E4%BC%98%E9%9B%85%E7%9A%84%E8%BF%9B%E8%A1%8CFeign%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95/image-20230612164309554.png" alt="image-20230612164309554" style="zoom:80%;"> </li><li><p>使用：注入自己继承的<code>Feign</code>接口，调用<code>Api</code></p><img src="/2023/03/12/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E4%BC%98%E9%9B%85%E7%9A%84%E8%BF%9B%E8%A1%8CFeign%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95/image-20230612164804260.png" alt="image-20230612164804260" style="zoom:80%;"></li><li><p>本地调试：此时就可以通过控制配置，来进行任意<code>url</code>路径的调试，而不会影响到<code>测试、生产</code>环境</p><img src="/2023/03/12/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E4%BC%98%E9%9B%85%E7%9A%84%E8%BF%9B%E8%A1%8CFeign%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95/image-20230612170125347.png" alt="image-20230612170125347" style="zoom:80%;"></li></ol><h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><p>对上述的第2、3步进行改进</p><ol><li><p>实现<code>Feign</code>接口：</p><img src="/2023/03/12/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E4%BC%98%E9%9B%85%E7%9A%84%E8%BF%9B%E8%A1%8CFeign%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95/image-20230612170836930.png" alt="image-20230612170836930" style="zoom:70%;"> <p>a）标准实现：增加<code>primary</code>属性</p><img src="/2023/03/12/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E4%BC%98%E9%9B%85%E7%9A%84%E8%BF%9B%E8%A1%8CFeign%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95/image-20230612165148721.png" alt="image-20230612165148721" style="zoom:80%;"> <p>b) 本地debug实现：增加<code>@Profile、@ConditionalOnProperty</code>，用于支持本地调试</p><img src="/2023/03/12/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E4%BC%98%E9%9B%85%E7%9A%84%E8%BF%9B%E8%A1%8CFeign%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95/image-20230612165456538.png" alt="image-20230612165456538" style="zoom:80%;"></li><li><p>使用：不直接注入自己继承的<code>Feign</code>子类，而是注入别的服务提供的<code>Feign</code>接口</p><img src="/2023/03/12/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E4%BC%98%E9%9B%85%E7%9A%84%E8%BF%9B%E8%A1%8CFeign%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95/image-20230612165919764.png" alt="image-20230612165919764" style="zoom:80%;"></li></ol><h2 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h2><p>不足：上面的用法，在用少量Feign接口依赖时还好；但是当需要接入大量依赖的<code>Feign</code>接口时，就会发现变得很繁琐，每1个Feign接口，都需要’’实现’’2遍。</p><img src="/2023/03/12/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E4%BC%98%E9%9B%85%E7%9A%84%E8%BF%9B%E8%A1%8CFeign%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95/image-20230612170501448.png" alt="image-20230612170501448" style="zoom:80%;">  <p>有没有更优雅、更简单的方式尼？</p><h1 id="Feign拦截器"><a href="#Feign拦截器" class="headerlink" title="Feign拦截器"></a>Feign拦截器</h1><p>Feign拦截器：Feign提供了拦截器，统一拦截Feign请求，来供我们进行一些公共的处理(例：添加header头等)</p><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="keyword">import</span> com.google.common.collect.Maps;</span><br><span class="line"><span class="keyword">import</span> feign.Client;</span><br><span class="line"><span class="keyword">import</span> feign.RequestInterceptor;</span><br><span class="line"><span class="keyword">import</span> feign.RequestTemplate;</span><br><span class="line"><span class="keyword">import</span> feign.Target;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.ObjectUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Profile;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Profile(value = &quot;local&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FeignContextInterceptor</span> <span class="keyword">implements</span> <span class="title class_">RequestInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;open.local.debug&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> debug;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 本地测试的请求地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, String&gt; SERVICE_MAP_URL = Maps.newConcurrentMap();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        SERVICE_MAP_URL.put(<span class="string">&quot;service-channel&quot;</span>, <span class="string">&quot;http://gateway.test.xx.cn/channel&quot;</span>);</span><br><span class="line">        SERVICE_MAP_URL.put(<span class="string">&quot;service-inventory&quot;</span>, <span class="string">&quot;https://gateway.test.xx.cn/inventory&quot;</span>);</span><br><span class="line">        SERVICE_MAP_URL.put(<span class="string">&quot;service-paycenter&quot;</span>, <span class="string">&quot;http://gateway.test.xx.cn/pc&quot;</span>);</span><br><span class="line">        SERVICE_MAP_URL.put(<span class="string">&quot;service-code&quot;</span>, <span class="string">&quot;https://gateway.test.x.cn/code&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">apply</span><span class="params">(RequestTemplate requestTemplate)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (debug) &#123;</span><br><span class="line">                Target&lt;?&gt; target = requestTemplate.feignTarget();</span><br><span class="line">                <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> SERVICE_MAP_URL.get(target.name());</span><br><span class="line">                <span class="keyword">if</span> (ObjectUtils.isEmpty(url))&#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Target.HardCodedTarget&lt;?&gt; hardCodedTarget </span><br><span class="line">                    = <span class="keyword">new</span> <span class="title class_">Target</span>.HardCodedTarget(target.type(), target.name(), url);</span><br><span class="line">                requestTemplate.feignTarget(hardCodedTarget);</span><br><span class="line">                hardCodedTarget.apply(requestTemplate);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;api request convert json fail.&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Client <span class="title function_">feignClient</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//指定url地址后，不能使用默认的配置的LoadBalancerFeignClient，需要显示注入client</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Client</span>.Default(<span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></div></figure></td></tr></table></figure><p>开启调试开关：</p><img src="/2023/03/12/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E4%BC%98%E9%9B%85%E7%9A%84%E8%BF%9B%E8%A1%8CFeign%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95/image-20230612175632514.png" alt="image-20230612175632514" style="zoom: 80%;"> <p>通过自定义的拦截器，就可以实现所有<code>Feign</code>地址的批量管理。</p><p>在某些场景，比如数据修复时，可能需要连接生产环境的查询接口时，也很实用</p>]]></content>
    
    
    <categories>
      
      <category>项目实战</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>Feign</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>异常定位：使用MAT分析OOM异常</title>
    <link href="/2023/02/25/%E5%BC%82%E5%B8%B8%E5%AE%9A%E4%BD%8D%EF%BC%9A%E4%BD%BF%E7%94%A8MAT%E5%88%86%E6%9E%90OOM%E5%BC%82%E5%B8%B8/"/>
    <url>/2023/02/25/%E5%BC%82%E5%B8%B8%E5%AE%9A%E4%BD%8D%EF%BC%9A%E4%BD%BF%E7%94%A8MAT%E5%88%86%E6%9E%90OOM%E5%BC%82%E5%B8%B8/</url>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>某日，生产告警群中突然出现大量的线上的请求报错，并且收到生产服务的内存阈值告警，通过查看日志、以及监控平台发现，某个容器发生了OOM异常，但整体服务并未完全瘫痪(<code>因为每个服务至少有3~4个容器</code>)，尚有其他节点还在正常对外提供服务</p><h1 id="紧急处理"><a href="#紧急处理" class="headerlink" title="紧急处理"></a>紧急处理</h1><p>此时，需要紧急进行处理，不然一部分流量会一直报错</p><ul><li>下线OOM的容器：避免流量再路由到该容器，因为该容器已经OOM，已无法对外正常提供服务</li><li>启动新的容器：缓解流量压力</li></ul><h1 id="后续定位"><a href="#后续定位" class="headerlink" title="后续定位"></a>后续定位</h1><p>通过紧急处理后，线上流量恢复正常，但是经过一段时间后(<code>数分钟</code>)，其中的某个容器又因为OOM而无法正常对外提供服务；所以在运维进行节点紧急处理的同时，后端研发立即开始对OOM的产生原因进行排查定位</p><h2 id="1、下载dump"><a href="#1、下载dump" class="headerlink" title="1、下载dump"></a>1、下载dump</h2><p>由于服务在启动时，指定了以下参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line">-XX:+HeapDumpOnOutOfMemoryError </span><br><span class="line">-XX:HeapDumpPath=./logs </span><br></pre></div></figure></td></tr></table></figure><p>所以，立即联系运维查找该容器的<code>dump</code>文件。</p><p>找到后发现，该<code>dump</code>达到了8G大小，文件太大，已经没法下载到本地，通过笔记本进行dump分析了。</p><p>所以选择将dump压缩，上传至一台内存大的空闲服务器上，进行dump分析</p><figure class="highlight shell"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line">tar zcf /data/java_pid1.tar.gz  java_pid1.hprof</span><br></pre></div></figure></td></tr></table></figure><h2 id="2、使用MAT分析"><a href="#2、使用MAT分析" class="headerlink" title="2、使用MAT分析"></a>2、使用MAT分析</h2><p>由于生产环境是在运维的协助下进行了，开发同学是没有操作权限的，所以下文我在windows的wsl系统中进行演示</p><p>MAT(Memory Analyzer Tool)：是一个基于Eclipse的内存分析工具，可帮助我们查找内存泄漏、减少内存消耗</p><p>1、首先需要在服务器上安装MAT：</p><figure class="highlight shell"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方法1、可以选择下载好后，上传至服务器</span></span><br><span class="line">下载地址：http://www.eclipse.org/mat/downloads.php</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方法2、可以直接在服务器上下载</span></span><br><span class="line">root@6d1f8b7a9da4:/# curl -O https://ftp.yz.yamagata-u.ac.jp/pub/eclipse//mat/1.12.0/rcp/MemoryAnalyzer-1.12.0.20210602-linux.gtk.x86_64.zip</span><br></pre></div></figure></td></tr></table></figure><img src="/2023/02/25/%E5%BC%82%E5%B8%B8%E5%AE%9A%E4%BD%8D%EF%BC%9A%E4%BD%BF%E7%94%A8MAT%E5%88%86%E6%9E%90OOM%E5%BC%82%E5%B8%B8/Snipaste_2022-06-06_19-17-24.png" alt="Snipaste_2022-06-06_19-17-24" style="zoom:80%;"> <p><b></b></p><p>2、解压：</p><figure class="highlight shell"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line">mdw@LAPTOP-BEJAL8K9:/mnt/d/wsl/mat$ unzip MemoryAnalyzer-1.12.0.20210602-linux.gtk.x86_64.zip</span><br></pre></div></figure></td></tr></table></figure><p>3、配置文件：如果dump文件太大，则需修改配置文件(<code>MemoryAnalyzer.ini</code>)</p><img src="/2023/02/25/%E5%BC%82%E5%B8%B8%E5%AE%9A%E4%BD%8D%EF%BC%9A%E4%BD%BF%E7%94%A8MAT%E5%88%86%E6%9E%90OOM%E5%BC%82%E5%B8%B8/Snipaste_2023-06-26_17-45-10.png" alt="Snipaste_2023-06-26_17-45-10" style="zoom:67%;"> <figure class="highlight sql"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"># MemoryAnalyzer.ini</span><br><span class="line"><span class="operator">-</span>startup</span><br><span class="line">plugins<span class="operator">/</span>org.eclipse.equinox.launcher_1<span class="number">.6</span><span class="number">.200</span>.v20210416<span class="number">-2027.</span>jar</span><br><span class="line"><span class="comment">--launcher.library</span></span><br><span class="line">plugins<span class="operator">/</span>org.eclipse.equinox.launcher.gtk.linux.x86_64_1<span class="number">.2</span><span class="number">.200</span>.v20210429<span class="number">-1609</span></span><br><span class="line"><span class="operator">-</span>vmargs</span><br><span class="line"><span class="operator">-</span>Xmx1024m # 若在后续操作中出现报错为heap space，而停止分析，说明堆内存小了，改它</span><br><span class="line"><span class="operator">-</span>DhprofStrictnessWarning<span class="operator">=</span><span class="literal">true</span>  # 最好加上，防止因为某些不必要的提示停止分析</span><br></pre></div></figure></td></tr></table></figure><p>4、开始分析：</p><figure class="highlight shell"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、切换到sh命令目录</span></span><br><span class="line">cd /mnt/d/wsl/soft/mat/mat</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、执行MAT命令：\后面不能有空格</span></span><br><span class="line">./ParseHeapDump.sh \</span><br><span class="line">    /mnt/d/wsl/dump/java_pid106068.hprof  \ </span><br><span class="line">    org.eclipse.mat.api:suspects \</span><br><span class="line">    org.eclipse.mat.api:overview \</span><br><span class="line">    org.eclipse.mat.api:top_components</span><br><span class="line">    </span><br><span class="line">-- 参数：可选择分析三者中的任意几个任务    </span><br><span class="line">    - suspects：生成xxx_Leak_Suspects.zip分析报告</span><br><span class="line">    泄漏嫌疑报告：包含了由MAT识别出的，潜在内存泄漏嫌疑对象的详细信息</span><br><span class="line">    - overview：生成xxx_System_Overview.zip分析报告</span><br><span class="line">    系统概览报告：堆转储文件的系统概览信息，用于全面了解系统的内存使用情况和分布</span><br><span class="line">                 包含了各种内存指标、GC活动、线程、类加载等系统级别的信息</span><br><span class="line">    - op_componets：生成xxx_Top_Components.zip分析报告</span><br><span class="line">                 最大对象组件报告：包含了堆转储文件中最大的对象组件(一组相互引用的对象)的信息</span><br><span class="line">                                 通过此报告，可了解占用内存最多的对象之间的关系</span><br></pre></div></figure></td></tr></table></figure><img src="/2023/02/25/%E5%BC%82%E5%B8%B8%E5%AE%9A%E4%BD%8D%EF%BC%9A%E4%BD%BF%E7%94%A8MAT%E5%88%86%E6%9E%90OOM%E5%BC%82%E5%B8%B8/Snipaste_2023-06-21_18-14-31.png" alt="Snipaste_2023-06-21_18-14-31" style="zoom:70%;"> <p><b></b></p><p>5、输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line">输出目录：分析文件、临时文件，会输出到dump文件目录下</span><br><span class="line">输出文件：</span><br><span class="line">  3份zpi文件：</span><br><span class="line">    [dump文件名]_Leak_Suspects.zip</span><br><span class="line">    [dump文件名]_System_Overview.zip</span><br><span class="line">    [dump文件名]_Top_Components.zip</span><br><span class="line">  临时文件：包含.index 结尾的索引文件，首次分析会建立索引速度较慢，后续再执行其他任务就很快了</span><br></pre></div></figure></td></tr></table></figure><img src="/2023/02/25/%E5%BC%82%E5%B8%B8%E5%AE%9A%E4%BD%8D%EF%BC%9A%E4%BD%BF%E7%94%A8MAT%E5%88%86%E6%9E%90OOM%E5%BC%82%E5%B8%B8/Snipaste_2022-06-06_20-56-02.png" alt="Snipaste_2022-06-06_20-56-02" style="zoom:80%;"><p> <b></b></p><p>6、查看分析报告：将.zip下载到本地，分别解压，双击<code>index.html</code>使用浏览器查看</p><p>○ 泄漏嫌疑报告：这里基本就已经破案了</p><img src="/2023/02/25/%E5%BC%82%E5%B8%B8%E5%AE%9A%E4%BD%8D%EF%BC%9A%E4%BD%BF%E7%94%A8MAT%E5%88%86%E6%9E%90OOM%E5%BC%82%E5%B8%B8/Snipaste_2022-06-06_21-25-00.png" alt="Snipaste_2022-06-06_21-25-00" style="zoom:80%;"> <p><b></b></p><p>○ 系统概览报告：通过查看我们自己的包名，能看到是哪个对象占用了大量堆内存</p><figure class="highlight shell"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line">在上述的生产OOM中，dump分析完成的系统概览报告中：</span><br><span class="line">某个对象(数据库结果集)，数据量达到了1000W+</span><br><span class="line">明显是查询数据库，where条件缺失导致，进而定位到了引发OOM的真凶</span><br></pre></div></figure></td></tr></table></figure><img src="/2023/02/25/%E5%BC%82%E5%B8%B8%E5%AE%9A%E4%BD%8D%EF%BC%9A%E4%BD%BF%E7%94%A8MAT%E5%88%86%E6%9E%90OOM%E5%BC%82%E5%B8%B8/Snipaste_2022-06-06_21-27-14.png" alt="Snipaste_2022-06-06_21-27-14" style="zoom:80%;"> <h2 id="3、遇到的问题"><a href="#3、遇到的问题" class="headerlink" title="3、遇到的问题"></a>3、遇到的问题</h2><p>在<a href="#2%E3%80%81%E4%BD%BF%E7%94%A8MAT%E5%88%86%E6%9E%90">使用MAT分析</a>的步骤4中，遇到了几个报错</p><ol><li><p>只支持JDK11以上：需要在服务器上安装JDK11，并在MAT的配置文件中指定</p><figure class="highlight shell"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line">mat Version 1.8.0_131 of the JVM is not suitable for this product. Version: 11 or greater is required</span><br></pre></div></figure></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="comment"># MemoryAnalyzer(mat) 内存分析工具报错version1.8.0 of the jvm is not suitable for this product 11</span></span><br><span class="line"><span class="attr">https</span>:<span class="string">//blog.csdn.net/health7788/article/details/123893540</span></span><br></pre></div></figure></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、修改配置文件：MemoryAnalyzer.ini</span></span><br><span class="line">-startup</span><br><span class="line">plugins/org.eclipse.equinox.launcher_1.6.200.v20210416-2027.jar</span><br><span class="line">--launcher.library</span><br><span class="line">plugins/org.eclipse.equinox.launcher.gtk.linux.x86_64_1.2.200.v20210429-1609</span><br><span class="line">-vm# 增加</span><br><span class="line">/mnt/c/JDK/jdk-11.0.15.1/bin/java   # 增加</span><br><span class="line">-vmargs</span><br><span class="line">-Xmx1024m</span><br><span class="line">-DhprofStrictnessWarning=true</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、重新执行</span></span><br></pre></div></figure></td></tr></table></figure></li><li><p>命令换行中带了空格，导致分析结果里没有zip文件：</p><img src="/2023/02/25/%E5%BC%82%E5%B8%B8%E5%AE%9A%E4%BD%8D%EF%BC%9A%E4%BD%BF%E7%94%A8MAT%E5%88%86%E6%9E%90OOM%E5%BC%82%E5%B8%B8/Snipaste_2023-06-21_17-41-13.png" alt="Snipaste_2023-06-21_17-41-13" style="zoom:70%;"> <p><b></b></p><img src="/2023/02/25/%E5%BC%82%E5%B8%B8%E5%AE%9A%E4%BD%8D%EF%BC%9A%E4%BD%BF%E7%94%A8MAT%E5%88%86%E6%9E%90OOM%E5%BC%82%E5%B8%B8/Snipaste_2023-06-21_18-09-25.png" alt="Snipaste_2023-06-21_18-09-25" style="zoom:80%;"><p>3、MAT配置的堆内存太小，分析完成，但是没有出现预期的分析结果文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">原因</span></span><br><span class="line">MAT的配置文件MemoryAnalyzer.ini中指定了堆内存最大值：Xmx1024m</span><br><span class="line">但我们的dump文件太大了(8G)，所以分析中断了</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解决：将MemoryAnalyzer.ini的Xmx参数调整为20G</span></span><br><span class="line">Xmx20g</span><br><span class="line">  ==&gt; 调整后，在经过了十几分钟的分析后，指定目录出现了分析结果文件</span><br></pre></div></figure></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>异常定位</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MAT</tag>
      
      <tag>OOM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>项目实战：策略与责任链模式在项目中的应用</title>
    <link href="/2023/02/08/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E7%AD%96%E7%95%A5%E4%B8%8E%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <url>/2023/02/08/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E7%AD%96%E7%95%A5%E4%B8%8E%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>以前项目中遇到需要发送消息触发提醒时，都是直接调用消息中心、三方消息渠道的API，进行业务消息推送</p><p>但是最近开发的几个需求，都要求对不同角色、不同消息渠道，进行消息触达推送。如果继续采用之前的方式，会造成相似功能重复开发，且难以维护。</p><img src="/2023/02/08/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E7%AD%96%E7%95%A5%E4%B8%8E%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/image-20230608161258537.png" alt="image-20230608161258537" style="zoom:80%;">  <p><b><br></b></p><img src="/2023/02/08/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E7%AD%96%E7%95%A5%E4%B8%8E%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/image-20230608161143052.png" alt="image-20230608161143052" style="zoom:80%;"> <h1 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h1><p>改进：基于上述背景，决定使用设计模式进行抽象，使其达到可复用、可扩展、配置化。</p><p>期望达成效果：后续有类似需求时，只需开发少量代码(<code>策略扩展、消息内容组装</code>) + 配置，即可实现功能</p><br><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p>以【消费者收货】这个业务场景为例，看一下项目中的效果：</p><p>□ Nacos配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="attr">msg-push</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">msgConfig</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">&quot;CONFIRM_RECEIPT_V2&quot;</span>:     <span class="string"></span></span><br><span class="line">        <span class="attr">&quot;WX_CP&quot;</span>: <span class="string"></span></span><br><span class="line">          <span class="attr">template</span>: <span class="string">&quot;您已完成本次扫码收货，获得奖励共计：%s元；金额已发放至您的电子钱包&quot;</span></span><br><span class="line">        <span class="attr">&quot;WX_MP&quot;</span>:<span class="string"></span></span><br><span class="line">          <span class="attr">template</span>: <span class="string">&quot;fKpHLE8jS18NdRczF8iJBS1HPNazDi9XUd-dY34bpzU&quot;  </span></span><br><span class="line">        <span class="attr">&quot;WX_APP&quot;</span>:<span class="string"></span></span><br><span class="line">          <span class="attr">template</span>: <span class="string">&quot;NpPdb5ghfEZnoG0AHg8zthOWu0oHIx0QIdzS1m1LPVo&quot;      </span></span><br></pre></div></figure></td></tr></table></figure><br><p>□ 效果：在各个终端上，就会收到消息通知</p><figure class="highlight shell"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line">xx.RebateSmsMsgStrategy   - [消息V2]发送短信,msgType：CONFIRM_RECEIPT_V2,msgSendReq：</span><br><span class="line">xx.RebateWxCpMsgStrategy  - [消息V2]发送企微文本消息,msgType：CONFIRM_RECEIPT_V2,msgSendReq：</span><br><span class="line">xx.RebateWxMpMsgStrategy  - [消息V2]发送微信公众号消息,msgType：CONFIRM_RECEIPT_V2,msgSendReq：</span><br><span class="line">xx.RebateWxAppMsgStrategy - [消息V2]发送微信小程序消息,msgType：CONFIRM_RECEIPT_V2,msgSendReq：</span><br></pre></div></figure></td></tr></table></figure><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><p>□ 整体流程：</p><img src="/2023/02/08/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E7%AD%96%E7%95%A5%E4%B8%8E%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/image-20230608143511193.png" alt="image-20230608143511193" style="zoom:80%;"> <br><br><p>□ 类设计：责任链模式 + 策略模式</p><img src="/2023/02/08/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E7%AD%96%E7%95%A5%E4%B8%8E%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/image-20230608124549023.png" alt="image-20230608124549023" style="zoom:80%;"> <br><br><p>□ 配置设计：</p><figure class="highlight properties"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="attr">msg-push</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">msgConfig</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">&quot;CONFIRM_RECEIPT_V2&quot;</span>:<span class="string"></span></span><br><span class="line">        <span class="attr">&quot;WX_CP&quot;</span>: <span class="string"></span></span><br><span class="line">          <span class="attr">template</span>: <span class="string">&quot;您已完成本次扫码收货，获得奖励共计：%s元；金额已发放至您的电子钱包&quot;</span></span><br><span class="line">        <span class="attr">&quot;WX_MP&quot;</span>:<span class="string"></span></span><br><span class="line">          <span class="attr">template</span>: <span class="string">&quot;fKpHLE8jS18NdRczF8iJBS1HPNazDi9XUd-dY34bpzU&quot;  </span></span><br><span class="line">        <span class="attr">&quot;WX_APP&quot;</span>:<span class="string"></span></span><br><span class="line">          <span class="attr">template</span>: <span class="string">&quot;NpPdb5ghfEZnoG0AHg8zthOWu0oHIx0QIdzS1m1LPVo&quot;     </span></span><br><span class="line">        <span class="attr">&quot;SMS&quot;</span>:<span class="string"></span></span><br><span class="line">          <span class="attr">template</span>: <span class="string">&quot;SMS_267100068&quot;  </span></span><br><span class="line">      <span class="attr">&quot;其他发送消息的业务场景&quot;</span>:<span class="string"></span></span><br></pre></div></figure></td></tr></table></figure><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>整体类结构：</p><img src="/2023/02/08/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E7%AD%96%E7%95%A5%E4%B8%8E%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/image-20230608153923272.png" alt="image-20230608153923272" style="zoom:67%;"> <h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ol><li><p>消息推送配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;msg-push&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RebateMsgProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息推送配置</span></span><br><span class="line"><span class="comment">     * key：消息业务场景，BizMsgTypeEnum</span></span><br><span class="line"><span class="comment">     * value：消息推送渠道，MsgPushChannelEnum</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Map&lt;String, MsgConfig&gt;&gt; msgConfig = Maps.newHashMap();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MsgConfig</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 模板</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> String template;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 如果是企微机器人这类的，需指定发送到哪里，一般是个固定的配置</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> String to;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></div></figure></td></tr></table></figure><img src="/2023/02/08/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E7%AD%96%E7%95%A5%E4%B8%8E%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/image-20230608152018621.png" alt="image-20230608152018621" style="zoom: 67%;"> <img src="/2023/02/08/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E7%AD%96%E7%95%A5%E4%B8%8E%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/image-20230608152116463.png" alt="image-20230608152116463" style="zoom:67%;"> </li><li><p>消息业务场景枚举：</p><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息业务场景枚举</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">RebateMsgTypeEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">    CONFIRM_RECEIPT_V2(<span class="string">&quot;确认收货消息提醒&quot;</span>),</span><br><span class="line">    SCAN_SALE_V2(<span class="string">&quot;动销消息提醒&quot;</span>),</span><br><span class="line">    RECONCILIATION_HINT(<span class="string">&quot;账单对账提示消息&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line">&#125;</span><br></pre></div></figure></td></tr></table></figure></li><li><p>消息推送渠道枚举：</p><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息推送渠道枚举</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">MsgPushChannelEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">    WX_CP(<span class="string">&quot;企业微信&quot;</span>),</span><br><span class="line">    WX_CP_ROBOT(<span class="string">&quot;企业微信机器人&quot;</span>),</span><br><span class="line">    WX_MP(<span class="string">&quot;微信公众号&quot;</span>),</span><br><span class="line">    WX_APP(<span class="string">&quot;微信小程序&quot;</span>),</span><br><span class="line">    SMS(<span class="string">&quot;短信&quot;</span>),</span><br><span class="line">    TAN_HOME(<span class="string">&quot;站内信&quot;</span>),</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line">&#125;</span><br></pre></div></figure></td></tr></table></figure></li></ol><h2 id="职责链"><a href="#职责链" class="headerlink" title="职责链"></a>职责链</h2><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息处理责任链</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RebateMsgHandlerChain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注入所有消息策略实现类</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RebateMsgStrategy[] rebateMsgServices;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 遍历所有消息策略，根据配置判断具体消息策略是否支持，调用策略发送消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msgType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customMsgSendReqDto</span></span><br><span class="line"><span class="comment">     */</span>    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendRebateMsg</span><span class="params">(RebateMsgTypeEnum msgType, CustomMsgSendReqDto customMsgSendReqDto)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (RebateMsgStrategy rebateMsgStrategy : rebateMsgServices) &#123;</span><br><span class="line">            <span class="keyword">if</span> (rebateMsgStrategy.support(msgType)) &#123;</span><br><span class="line">                rebateMsgStrategy.sendRebateMsg(msgType, customMsgSendReqDto);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></div></figure></td></tr></table></figure><h2 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h2><ol><li><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RebateMsgStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息类型是否支持</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msgType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">support</span><span class="params">(RebateMsgTypeEnum msgType)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msgType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customMsgSendReqDto</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sendRebateMsg</span><span class="params">(RebateMsgTypeEnum msgType, CustomMsgSendReqDto customMsgSendReqDto)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></div></figure></td></tr></table></figure></li><li><p>抽象实现：</p><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractRebateMsgStrategy</span> <span class="keyword">implements</span> <span class="title class_">RebateMsgStrategy</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RebateMsgProperties rebateMsgProperties;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ThreadPoolExecutor threadPoolExecutor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取消息推送渠道</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> MsgPushChannelEnum <span class="title function_">getMsgPushChannelEnum</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行具体的消息发送策略</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msgType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msgSendReqDto</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">doRebateMsgSend</span><span class="params">(RebateMsgTypeEnum msgType,</span></span><br><span class="line"><span class="params">                                            MsgSendReqDto msgSendReqDto)</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息类型是否支持</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msgType</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">support</span><span class="params">(RebateMsgTypeEnum msgType)</span> &#123;</span><br><span class="line">        Map&lt;String, RebateMsgProperties.MsgConfig&gt; msgConfigMap = </span><br><span class="line">            rebateMsgProperties.getMsgConfig().get(msgType.name());</span><br><span class="line">        <span class="keyword">if</span> (MapUtils.isEmpty(msgConfigMap)) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;[消息V2]该消息类型配置不存在,msgType：&#123;&#125;&quot;</span>, msgType);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (msgConfigMap.containsKey(getMsgPushChannelEnum().name())) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msgType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customMsgSendReqDto</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMsg</span><span class="params">(RebateMsgTypeEnum msgType, CustomMsgSendReqDto customMsgSendReqDto)</span> &#123;</span><br><span class="line">        <span class="comment">// 根据业务场景、消息渠道不同，组装成对象的消息请求</span></span><br><span class="line">        <span class="type">MsgSendReqDto</span> <span class="variable">msgSendReqDto</span> <span class="operator">=</span> buildMsgContent(msgType, customMsgSendReqDto);</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(msgSendReqDto)) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;[消息V2]buildMsgContent为空,不发送,msgType：&#123;&#125;,msgPushChannel：&#123;&#125;,req：&#123;&#125;&quot;</span>,</span><br><span class="line">                     msgType, getMsgPushChannelEnum().name(), </span><br><span class="line">                     JSON.toJSONString(customMsgSendReqDto));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        doRebateMsgSendAsync(msgType, msgSendReqDto);</span><br><span class="line">    &#125;    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步执行消息发送</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msgType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msgSendReqDto</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doRebateMsgSendAsync</span><span class="params">(RebateMsgTypeEnum msgType, MsgSendReqDto msgSendReqDto)</span> &#123;</span><br><span class="line">        threadPoolExecutor.execute(RunnableWrapper.of(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                doRebateMsgSend(msgType, msgSendReqDto);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.warn(<span class="string">&quot;[消息V2]异步发送异常errorMsg；&#123;&#125;,msgType：&#123;&#125;,msgPushChannel：&#123;&#125;&quot;</span>, </span><br><span class="line">                         e.getMessage(), msgType.name(), getMsgPushChannelEnum().name(), </span><br><span class="line">                         JSON.toJSONString(msgSendReqDto), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></div></figure></td></tr></table></figure></li><li><p>具体策略：</p><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送短信</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RebateSmsMsgStrategy</span> <span class="keyword">extends</span> <span class="title class_">AbstractRebateMsgStrategy</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MsgClient msgClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取消息推送渠道</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> MsgPushChannelEnum <span class="title function_">getMsgPushChannelEnum</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> MsgPushChannelEnum.SMS;</span><br><span class="line">    &#125;    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行具体的消息发送策略</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msgType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msgSendReqDto</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doRebateMsgSend</span><span class="params">(RebateMsgTypeEnum msgType, MsgSendReqDto msgSendReqDto)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;[消息V2]发送短信,msgType：&#123;&#125;,msgSendReqDto：&#123;&#125;&quot;</span>, msgType.name(),</span><br><span class="line">                 JSON.toJSONString(msgSendReqDto));</span><br><span class="line">        <span class="type">SmsMsgContentDto</span> <span class="variable">smsDto</span> <span class="operator">=</span> (SmsMsgContentDto) msgSendReqDto.getContentDto();</span><br><span class="line">        msgClient.sendSms(msgSendReqDto.getTo(), smsDto.getTemplateCode(), smsDto.getParamMap());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></div></figure></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送企微消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RebateWxCpMsgStrategy</span> <span class="keyword">extends</span> <span class="title class_">AbstractRebateMsgStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MsgClient msgClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取消息推送渠道</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> MsgPushChannelEnum <span class="title function_">getMsgPushChannelEnum</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> MsgPushChannelEnum.WX_CP;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行具体的消息发送策略</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msgType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msgSendReqDto</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doRebateMsgSend</span><span class="params">(RebateMsgTypeEnum msgType, MsgSendReqDto msgSendReqDto)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;[消息V2]发送企微消息,msgType：&#123;&#125;,msgSendReqDto：&#123;&#125;&quot;</span>, msgType.name(), </span><br><span class="line">                 JSON.toJSONString(msgSendReqDto));</span><br><span class="line">        <span class="type">Long</span> <span class="variable">to</span> <span class="operator">=</span> Long.valueOf(msgSendReqDto.getTo());</span><br><span class="line">        msgClient.sendWxCpTextByGuid(to, ((TextMsgContentDto) msgContent).getText());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></div></figure></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送企微机器人消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RebateWxCpRobotMsgStrategy</span> <span class="keyword">extends</span> <span class="title class_">AbstractRebateMsgStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取消息推送渠道</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> MsgPushChannelEnum <span class="title function_">getMsgPushChannelEnum</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> MsgPushChannelEnum.WX_CP_ROBOT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行具体的消息发送策略</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msgType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msgSendReqDto</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doRebateMsgSend</span><span class="params">(RebateMsgTypeEnum msgType, MsgSendReqDto msgSendReqDto)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;[消息V2]发送企微机器人消息,msgType：&#123;&#125;,msgSendReqDto：&#123;&#125;&quot;</span>, msgType.name(), </span><br><span class="line">                 JSON.toJSONString(msgSendReqDto));</span><br><span class="line">        <span class="type">MsgContentDto</span> <span class="variable">msgContent</span> <span class="operator">=</span> msgSendReqDto.getContentDto();</span><br><span class="line">        <span class="keyword">if</span> (msgContent <span class="keyword">instanceof</span> TextMsgContentDto) &#123;</span><br><span class="line">            MonitorUtils.qwMonitor(msgSendReqDto.getTo(), </span><br><span class="line">                                   ((TextMsgContentDto) msgContent).getText());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></div></figure></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送微信公众号消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RebateWxMpMsgStrategy</span> <span class="keyword">extends</span> <span class="title class_">AbstractRebateMsgStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MsgCenterClient msgCenterClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取消息推送渠道</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> MsgPushChannelEnum <span class="title function_">getMsgPushChannelEnum</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> MsgPushChannelEnum.WX_MP;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行具体的消息发送策略</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msgType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msgSendReqDto</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doRebateMsgSend</span><span class="params">(RebateMsgTypeEnum msgType, MsgSendReqDto msgSendReqDto)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;[消息V2]发送微信公众号消息,msgType：&#123;&#125;,msgSendReqDto：&#123;&#125;&quot;</span>, msgType.name(), </span><br><span class="line">                 JSON.toJSONString(msgSendReqDto));</span><br><span class="line">        <span class="type">WxMpMsgContentDto</span> <span class="variable">wxMpMsgContentDto</span> <span class="operator">=</span> (WxMpMsgContentDto) msgSendReqDto.getContentDto();</span><br><span class="line">        <span class="type">MessageReq</span> <span class="variable">req</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessageReq</span>();</span><br><span class="line">        MessageReq.<span class="type">MpTemplateMsgReq</span> <span class="variable">mpTemplateMsg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessageReq</span>.MpTemplateMsgReq();</span><br><span class="line">        mpTemplateMsg.setTemplateId(wxMpMsgContentDto.getTemplateId())</span><br><span class="line">                .setDataByMap(wxMpMsgContentDto.getParamMap())</span><br><span class="line">                .setMiniprogram(wxMpMsgContentDto.getMiniProgramAppId(),</span><br><span class="line">                                wxMpMsgContentDto.getUrl());</span><br><span class="line">        req.setAppid(wxMpMsgContentDto.getAppId())</span><br><span class="line">                .setMessageType(MessageCenterTypeEnum.WECHAT_WP.getType())</span><br><span class="line">                .setToUser(msgSendReqDto.getTo())</span><br><span class="line">                .setMpTemplateMsg(mpTemplateMsg);</span><br><span class="line">        msgCenterClient.sendMsg(getMsgPushChannelEnum(), req);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></div></figure></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送微信小程序消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RebateWxAppMsgStrategy</span> <span class="keyword">extends</span> <span class="title class_">AbstractRebateMsgStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MsgCenterClient msgCenterClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取消息推送渠道</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> MsgPushChannelEnum <span class="title function_">getMsgPushChannelEnum</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> MsgPushChannelEnum.WX_APP;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行具体的消息发送策略</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msgType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msgSendReqDto</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doRebateMsgSend</span><span class="params">(RebateMsgTypeEnum msgType, MsgSendReqDto msgSendReqDto)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;[分润消息V2]发送微信小程序消息,msgType：&#123;&#125;,msgSendReqDto：&#123;&#125;&quot;</span>, msgType.name(),</span><br><span class="line">                 JSON.toJSONString(msgSendReqDto));</span><br><span class="line"></span><br><span class="line">        <span class="type">WxAppMsgContentDto</span> <span class="variable">wxAppMsgContentDto</span></span><br><span class="line">            <span class="operator">=</span> (WxAppMsgContentDto) msgSendReqDto.getContentDto();</span><br><span class="line">        <span class="type">MessageReq</span> <span class="variable">req</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessageReq</span>();</span><br><span class="line">        MessageReq.<span class="type">WeappTemplateMsgReq</span> <span class="variable">weappTemplateMsgReq</span></span><br><span class="line">            <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessageReq</span>.WeappTemplateMsgReq();</span><br><span class="line">        weappTemplateMsgReq.setTemplateId(wxAppMsgContentDto.getTemplateId())</span><br><span class="line">                .setPage(wxAppMsgContentDto.getUrl())</span><br><span class="line">                .setDataByMap(wxAppMsgContentDto.getParamMap());</span><br><span class="line">        req.setAppid(wxAppMsgContentDto.getAppId())</span><br><span class="line">                .setMessageType(MessageCenterTypeEnum.WECHAT_APP.getType())</span><br><span class="line">                .setToUser(msgSendReqDto.getTo())</span><br><span class="line">                .setWeappTemplateMsg(weappTemplateMsgReq);</span><br><span class="line">        msgCenterClient.sendMsg(getMsgPushChannelEnum(), req);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></div></figure></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>项目实战</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
      <tag>策略模式</tag>
      
      <tag>责任链模式</tag>
      
      <tag>消息发送</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>项目实战：距离用户最近的3个网点</title>
    <link href="/2023/01/10/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E8%B7%9D%E7%A6%BB%E7%94%A8%E6%88%B7%E6%9C%80%E8%BF%91%E7%9A%843%E4%B8%AA%E7%BD%91%E7%82%B9/"/>
    <url>/2023/01/10/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E8%B7%9D%E7%A6%BB%E7%94%A8%E6%88%B7%E6%9C%80%E8%BF%91%E7%9A%843%E4%B8%AA%E7%BD%91%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="业务需求"><a href="#业务需求" class="headerlink" title="业务需求"></a>业务需求</h1><p>业务需求：公司最近为了推广产品、积累C端用户流量池，策划了1个营销活动；消费者可参与营销活动，在线上抢占活动产品，然后去公司线下的合作网点领取奖品实物。用户参加活动时，需要查找<code>10KM内，距离用户最近的3个网点</code>的地址，以便判断是否可以参与本次活动，以及抢占成功后，查看领奖网点地址</p><img src="/2023/01/10/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E8%B7%9D%E7%A6%BB%E7%94%A8%E6%88%B7%E6%9C%80%E8%BF%91%E7%9A%843%E4%B8%AA%E7%BD%91%E7%82%B9/Snipaste_2023-06-08_11-28-41.png" alt="Snipaste_2023-06-08_11-28-41" style="zoom:75%;"> <h1 id="技术实现"><a href="#技术实现" class="headerlink" title="技术实现"></a>技术实现</h1><p>系统流程图，大致如下：</p><img src="/2023/01/10/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E8%B7%9D%E7%A6%BB%E7%94%A8%E6%88%B7%E6%9C%80%E8%BF%91%E7%9A%843%E4%B8%AA%E7%BD%91%E7%82%B9/image-20230607141543311.png" alt="image-20230607141543311" style="zoom: 80%;">    <p>红色部分：需要对外提供1个查询接口，根据前端传入的用户经纬度坐标，查询距离用户最近的3个网点地址。那么如何实现这个功能尼？</p><h2 id="Mysql函数"><a href="#Mysql函数" class="headerlink" title="Mysql函数"></a>Mysql函数</h2><p>由于工期很紧，因此采用了Mysql函数来实现此功能</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>□ 需要使用到的Mysql函数：<code>st_distance()</code>   （单位：米）</p><figure class="highlight sql"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"># 两点距离：mysql <span class="number">5.6</span></span><br><span class="line"><span class="keyword">select</span> st_distance(point(<span class="number">0</span>,<span class="number">0</span>), point(<span class="number">1</span>,<span class="number">1</span>));</span><br><span class="line"><span class="keyword">select</span> st_distance(point(<span class="number">120.10591</span>, <span class="number">30.30163</span>), point(<span class="number">120.13026</span>, <span class="number">30.25961</span>));</span><br><span class="line"></span><br><span class="line"># 两点球面距离：mysql <span class="number">5.7</span><span class="number">.6</span></span><br><span class="line"><span class="keyword">select</span> st_distance_sphere(point(<span class="number">0</span>,<span class="number">0</span>), point(<span class="number">1</span>,<span class="number">1</span>));</span><br><span class="line"><span class="keyword">select</span> st_distance_sphere(point(<span class="number">120.10591</span>, <span class="number">30.30163</span>), point(<span class="number">120.13026</span>, <span class="number">30.25961</span>));</span><br></pre></div></figure></td></tr></table></figure><br><p>□ 业务sql：</p><figure class="highlight sql"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">t.id,       </span><br><span class="line"># <span class="comment">-----------------网点的经纬度坐标---------------用户的经纬度坐标-------- </span></span><br><span class="line">st_distance_sphere(point (t.gpsx, t.gpsy), point(<span class="number">134.307000</span>,<span class="number">48.364000</span>)) <span class="keyword">as</span> distance</span><br><span class="line"><span class="keyword">from</span> t_point t </span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line"># 过滤错误数据：经纬度反了，或者不正确的 (否则报错：Incorrect arguments <span class="keyword">to</span> st_distance_sphere)</span><br><span class="line">(t.gpsx <span class="keyword">between</span> <span class="number">-180</span> <span class="keyword">and</span> <span class="number">180</span>) <span class="keyword">and</span> (t.gpsy <span class="keyword">between</span> <span class="number">-90</span> <span class="keyword">and</span> <span class="number">90</span>)</span><br><span class="line"># <span class="number">10</span>KM以内 </span><br><span class="line"><span class="keyword">and</span> distance <span class="operator">&lt;</span> <span class="number">10000</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> distance </span><br><span class="line">limit <span class="number">3</span>;  </span><br></pre></div></figure></td></tr></table></figure><img src="/2023/01/10/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E8%B7%9D%E7%A6%BB%E7%94%A8%E6%88%B7%E6%9C%80%E8%BF%91%E7%9A%843%E4%B8%AA%E7%BD%91%E7%82%B9/image-20230607143804335.png" alt="image-20230607143804335" style="zoom:80%;"> <h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>问题：在测试环境时，一切正常。但是上到生产后，在活动高峰期，数据库CPU出现告警(<code>达到了90%以上</code>)，经过排查后发现大量请求阻塞在该sql。</p><p>问题分析： </p><ol><li><p>业务：由于该业务属于秒杀性质的活动，高峰期参与活动的用户激增</p></li><li><p>技术：</p><p>a) <code>QPS</code>激增：虽然经过测试单条sql的执行时间小于1s，但是当<code>QPS</code>上来之后，大量请求阻塞在该sql</p><p>b) 索引失效：虽然在经纬度字段上加了索引，但是在索引列上使用了函数计算，导致索引失效，进行了全表扫描</p><img src="/2023/01/10/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E8%B7%9D%E7%A6%BB%E7%94%A8%E6%88%B7%E6%9C%80%E8%BF%91%E7%9A%843%E4%B8%AA%E7%BD%91%E7%82%B9/image-20230607144745319.png" alt="image-20230607144745319" style="zoom:80%;"></li></ol><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>问题定位到了，那如何解决尼？</p><p>现在生产数据库的<code>CPU</code>已经告警了，所以技术方案优化已经来不及了，需要从短解、长解两个方面来制定解决方案</p><p>□ 短解：</p><ol><li>数据库限流：紧急对该<code>sql</code>配置限流规则 （阿里云提供的功能）</li><li>数据库升配：紧急升级数据库的硬件配置 （云服务器，加钱）</li></ol><p>□ 长解：</p><ol><li>更换技术实现：使用<code>Redis Geo</code>来实现该功能</li><li>缓存：可以将查询结果，根据用户id作为key，做短时间的缓存；避免用户频繁刷新时，进行重复计算</li><li>风控限流：对于恶意请求、刷接口的这类异常请求，需要有风控限流机制，进行自动限流</li></ol><h2 id="Redis-Geo"><a href="#Redis-Geo" class="headerlink" title="Redis Geo"></a>Redis Geo</h2><h3 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h3><p>□ 写入：将经纬度数据写入<code>Redis Geo</code>中  </p><p>底层命令：<code>geoadd</code></p><ol><li><p>存量网点：将所有存量网点的经纬度信息，初始化到Redis中</p></li><li><p>增量网点：新签约的线下网点，签约完成后，需要将经纬度信息，写入到Redis中</p><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addGeo</span><span class="params">(List&lt;PointBo&gt; pointBoList)</span> &#123;</span><br><span class="line">    <span class="comment">// 过滤掉经纬度不合法的错误数据</span></span><br><span class="line">    pointBoList = filterWrongData(pointBoList);</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isEmpty(pointBoList)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分批写入Geo</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    Map&lt;String, Point&gt; points = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">200</span>);</span><br><span class="line">    <span class="keyword">for</span> (PointBo pointBo : pointBoList) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">memberKey</span> <span class="operator">=</span> String.valueOf(pointBo.getId());</span><br><span class="line">        <span class="type">Point</span> <span class="variable">point</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Point</span>(pointBo.getGpsx().doubleValue(), </span><br><span class="line">                                pointBo.getGpsy().doubleValue());</span><br><span class="line">        points.put(memberKey, point);</span><br><span class="line"></span><br><span class="line">        i++;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">100</span> || i == pointBoList.size() - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 批量添加到Geo</span></span><br><span class="line">            stringRedisTemplate.boundGeoOps(POINT_GEO_LOCATION).add(points);</span><br><span class="line">            i = <span class="number">0</span>;</span><br><span class="line">            points = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">200</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></div></figure></td></tr></table></figure></li></ol><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>□ 查询：携带用户经纬度 + 搜索半径，从<code>Redis Geo</code>中搜索符合要求的目标网点 </p><p>底层命令：<code>georadius</code></p><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询指定搜索半径内，距离当前坐标最近的3个网点</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> gpsx     目标经度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> gpsy     目标纬度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> distance 搜索半径(米)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Long&gt; <span class="title function_">getNearbyPoint</span><span class="params">(Double gpsx,</span></span><br><span class="line"><span class="params">                                 Double gpsy,</span></span><br><span class="line"><span class="params">                                 Double distance)</span> &#123;</span><br><span class="line">    <span class="type">Point</span> <span class="variable">point</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Point</span>(gpsx, gpsy);</span><br><span class="line"></span><br><span class="line">    <span class="type">Metric</span> <span class="variable">metric</span> <span class="operator">=</span> RedisGeoCommands.DistanceUnit.KILOMETERS;</span><br><span class="line">    <span class="type">Distance</span> <span class="variable">distances</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Distance</span>(distance, metric);</span><br><span class="line"></span><br><span class="line">    <span class="type">Circle</span> <span class="variable">circle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>(point, distances); <span class="comment">// 单位：默认为米</span></span><br><span class="line">    RedisGeoCommands.<span class="type">GeoRadiusCommandArgs</span> <span class="variable">args</span> <span class="operator">=</span> RedisGeoCommands.GeoRadiusCommandArgs</span><br><span class="line">        .newGeoRadiusArgs()</span><br><span class="line">        .includeDistance()</span><br><span class="line">        .includeCoordinates()</span><br><span class="line">        .sortAscending()</span><br><span class="line">        .limit(<span class="number">3</span>);</span><br><span class="line">    GeoResults&lt;RedisGeoCommands.GeoLocation&lt;String&gt;&gt; radius = stringRedisTemplate.opsForGeo()</span><br><span class="line">        .radius(POINT_GEO_LOCATION, circle, args);</span><br><span class="line">    List&lt;Long&gt; nearbyPointIdList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (radius != <span class="literal">null</span>) &#123;</span><br><span class="line">        radius.forEach(geoLocationGeoResult -&gt; &#123;</span><br><span class="line">            RedisGeoCommands.GeoLocation&lt;String&gt; content = geoLocationGeoResult.getContent();</span><br><span class="line">            <span class="comment">// name：网点id</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> content.getName();</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotEmpty(name) &amp;&amp; StringUtils.isNumeric(name)) &#123;</span><br><span class="line">                nearbyPointIdList.add(Long.valueOf(name));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nearbyPointIdList;</span><br><span class="line">&#125;</span><br></pre></div></figure></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>□ 接口测试：</p><img src="/2023/01/10/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E8%B7%9D%E7%A6%BB%E7%94%A8%E6%88%B7%E6%9C%80%E8%BF%91%E7%9A%843%E4%B8%AA%E7%BD%91%E7%82%B9/Snipaste_2022-02-23_14-56-45.png" alt="Snipaste_2022-02-23_14-56-45" style="zoom:67%;"> <p><br><br></p><p>□ 压测：由于吸取了之前的教训，所以本次技术变更后，进行了接口压力测试</p><figure class="highlight shell"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line">环境配置：</span><br><span class="line">服务：dev</span><br><span class="line">Redis：dev</span><br><span class="line">参数：搜索半径r=20</span><br><span class="line">压测结果：QPS ≈ 320+ ，随着搜索半径↓，QPS↑</span><br></pre></div></figure></td></tr></table></figure><img src="/2023/01/10/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E8%B7%9D%E7%A6%BB%E7%94%A8%E6%88%B7%E6%9C%80%E8%BF%91%E7%9A%843%E4%B8%AA%E7%BD%91%E7%82%B9/Snipaste_2021-12-01_17-20-04.png" alt="Snipaste_2021-12-01_17-20-04" style="zoom:80%;"><p><b><br></b></p><img src="/2023/01/10/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E8%B7%9D%E7%A6%BB%E7%94%A8%E6%88%B7%E6%9C%80%E8%BF%91%E7%9A%843%E4%B8%AA%E7%BD%91%E7%82%B9/Snipaste_2021-12-01_17-30-21.png" alt="Snipaste_2021-12-01_17-30-21" style="zoom:80%;"><br><br><br><p>□ Redis内存占用：本地测试，<code>5.6万</code>网点数据，占用内存<code>6.7M</code>左右</p><img src="/2023/01/10/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E8%B7%9D%E7%A6%BB%E7%94%A8%E6%88%B7%E6%9C%80%E8%BF%91%E7%9A%843%E4%B8%AA%E7%BD%91%E7%82%B9/image-20230608121959690.png" alt="image-20230608121959690" style="zoom:80%;"><h3 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h3><p>问题：如果线下网点数据过多，比如有几百万，那全部存入Redis Geo，会导致底层的Zset变的很大，查询性能会急剧下降</p><p>由于我司的网点数据为几万的数量级，所以不存在此问题，那如果真有几百万的网点数据，有什么解决方案尼？</p><h2 id="图数据库"><a href="#图数据库" class="headerlink" title="图数据库"></a>图数据库</h2><p>使用图形数据库，例如：Neo4j</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://neo4j.com/docs/">neo4j官方文档</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>项目实战</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis-Geo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>开箱即用的Xxl-job后台动态管理Starter</title>
    <link href="/2022/07/24/%E5%BC%80%E7%AE%B1%E5%8D%B3%E7%94%A8%E7%9A%84xxl-job%E5%90%8E%E5%8F%B0%E5%8A%A8%E6%80%81%E7%AE%A1%E7%90%86starter/"/>
    <url>/2022/07/24/%E5%BC%80%E7%AE%B1%E5%8D%B3%E7%94%A8%E7%9A%84xxl-job%E5%90%8E%E5%8F%B0%E5%8A%A8%E6%80%81%E7%AE%A1%E7%90%86starter/</url>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>由于最近要设计开发一个通用对账系统，不同的对账参与方的对账时间节点不一。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line">资金对账：</span><br><span class="line">  - 微信：可能是每天7点以后，才能下载前1天的对账单</span><br><span class="line">  - 通联：可能是每天8点以后，才能下载前1天的对账单</span><br><span class="line">业务对账：不同的业务动作，需灵活配置对账时间节点</span><br></pre></div></figure></td></tr></table></figure><p>所以决定采用了xxl-job来实现对账调度，但是存在1个问题，对账任务如何自动创建？</p><p>不可能每接入一个对账业务方，都需要开发人员去xxl-job后台手动建1个执行任务(<code>手动配置容易出错，且系统开发完成后也无法解放开发人员</code>)，系统希望在运营人员配置好对账项目后，xxl-job的定时任务也自动创建好。</p><br><p>□ 解决方案：在对账项目中，通过调用xxl-job暴露的API实现任务的自动创建</p><img src="/2022/07/24/%E5%BC%80%E7%AE%B1%E5%8D%B3%E7%94%A8%E7%9A%84xxl-job%E5%90%8E%E5%8F%B0%E5%8A%A8%E6%80%81%E7%AE%A1%E7%90%86starter/Snipaste_2022-05-06_16-32-43.png" alt="Snipaste_2022-05-06_16-32-43" style="zoom:100%;"><p>● 执行器：所有对账任务采用同1个xxl-job执行器(xxl-job后台配置的<code>JobHandler</code>,也即代码中被<code>@XxlJob</code>注解的方法)</p><img src="/2022/07/24/%E5%BC%80%E7%AE%B1%E5%8D%B3%E7%94%A8%E7%9A%84xxl-job%E5%90%8E%E5%8F%B0%E5%8A%A8%E6%80%81%E7%AE%A1%E7%90%86starter/image-20230529180237261.png" alt="image-20230529180237261" style="zoom:80%;">  <p>● 不同的对账场景：使用不同的执行任务，并以任务参数进行区分</p><p>● 任务新建：使用<code>xxl-job-admin</code>暴露的后台<code>API</code>动态进行任务<code>添加、修改、启动、停止</code>等功能。</p><p>● 优点：当新接入1个对账业务方，只需要运营人员在增加对账配置时，自动在后台新增一个xxl-job执行任务，即可实现对账调度；而不是由开发人员再去xxl-job管理后台新建执行任务</p><p>● 代码实现：在网上搜索，也有比较多的博客涉及到如何访问<code>xxl-job-admin</code>的接口，但要么代码不全，要么缺乏扩展性，为了接入简单，开箱即用，封装了一个<code>starter</code>，帮助有同样需求的同学快速投入项目使用</p><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><ul><li>xxl-job模拟登录</li><li>xxl-job执行器：动态新增、动态注册、动态查询</li><li>xxl-job执行任务：动态添加、动态更新、动态启动、动态停止</li></ul><h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><ul><li><code>xxl-job-admin</code>的API需要登录才能访问，本项目中进行了模拟登录，获取到cookie，然后携带cookie访问API</li><li>对接口访问进行统一封装，扩展性强</li><li>将工程封装成<code>spring-boot-starter</code>，开箱即用</li><li>本项目对接的xxl-job接口，都进行了单元测试，单元测试案例见<code>com.mdw.xxl.job.task#XxlJobTest</code></li></ul><h1 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h1><p>1、下载源码：<a href="https://gitee.com/xiao-mading/xxl-job-task-spring-boot-starter">https://gitee.com/xiao-mading/xxl-job-task-spring-boot-starter</a></p><p>2、打成jar，放入maven仓库</p><p>3、引用</p><figure class="highlight xml"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="comment">&lt;!--例如：--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mading<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxl-job-task-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></div></figure></td></tr></table></figure><p>4、配置xxl-job</p><figure class="highlight properties"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="comment"># 前缀可自行在XxlJobProperties中修改</span></span><br><span class="line"><span class="attr">xxl.adminAddresses</span>=<span class="string">http://127.0.0.1:8080/xxl-job-admin</span></span><br><span class="line"><span class="attr">xxl.appname</span>=<span class="string">$&#123;spring.application.name&#125;</span></span><br><span class="line"><span class="attr">xxl.logretentiondays</span>=<span class="string">30</span></span><br><span class="line"><span class="attr">xxl.port</span>=<span class="string">9999</span></span><br><span class="line"><span class="attr">xxl.accessToken</span>=<span class="string">289d5e0b-e83b-40a1-87ec-fd7b2335f15c</span></span><br></pre></div></figure></td></tr></table></figure><p>5、使用</p><figure class="highlight java"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> XxlJobProperties xxlJobProperties;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> XxlJobClient xxlJobClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行器id</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">jobGroup</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">dynamicAddJob</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">JobAddRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JobAddRequest</span>();</span><br><span class="line">        request.setJobGroup(jobGroup)</span><br><span class="line">                .setJobDesc(<span class="string">&quot;支付中心-微信对账&quot;</span>)</span><br><span class="line">                .setJobCron(<span class="string">&quot;0 0/1 * * * ?&quot;</span>)</span><br><span class="line">                .setExecutorHandler(<span class="string">&quot;checkAccountTask&quot;</span>)</span><br><span class="line">                .setExecutorParam(<span class="string">&quot;paycenter-wx&quot;</span>)</span><br><span class="line">                .setAuthor(<span class="string">&quot;马丁丁&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> xxlJobClient.execute(request);</span><br><span class="line">    &#125;</span><br></pre></div></figure></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>生产实践</category>
      
    </categories>
    
    
    <tags>
      
      <tag>xxl-job</tag>
      
      <tag>任务动态管理</tag>
      
      <tag>SpringBoot Starter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>软件开发：发布清单</title>
    <link href="/2022/05/07/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%EF%BC%9A%E5%8F%91%E5%B8%83%E6%B8%85%E5%8D%95/"/>
    <url>/2022/05/07/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%EF%BC%9A%E5%8F%91%E5%B8%83%E6%B8%85%E5%8D%95/</url>
    
    <content type="html"><![CDATA[<h1 id="what"><a href="#what" class="headerlink" title="what?"></a>what?</h1><p>什么是发布清单？</p><p>发布清单是一个项目、需求上线前，需要做的一系列准备的清单文档。主要包含以下内容：</p><ol><li>代码发布分支、是否合并、发布顺序(多个项目联合发布时)</li><li>配置信息：Nacos配置、MQ配置、三方平台配置(OA、微信)等</li><li>数据库：初始化sql等</li><li>定时任务：</li></ol><h1 id="when"><a href="#when" class="headerlink" title="when?"></a>when?</h1><p>什么时候需要写发布清单？</p><p>在上线前1天，就需要将发布清单中的各项内容进行梳理，避免上线时遗漏</p><h1 id="how"><a href="#how" class="headerlink" title="how?"></a>how?</h1><p>那如何写一个规范的发布清单尼？下面根据博主自身的工作经验，给出示例</p><h1 id="礼品卡需求-清结算侧上线清单"><a href="#礼品卡需求-清结算侧上线清单" class="headerlink" title="礼品卡需求-清结算侧上线清单"></a>礼品卡需求-清结算侧上线清单</h1><p>上线日期：2023-06-05</p><h1 id="1、上线涉及的项目与分支"><a href="#1、上线涉及的项目与分支" class="headerlink" title="1、上线涉及的项目与分支"></a>1、上线涉及的项目与分支</h1><table><thead><tr><th>项目名称</th><th>分支</th><th>项目地址</th><th>代码是否合并</th><th>发布顺序</th><th>处理人</th></tr></thead><tbody><tr><td>service-xxx1</td><td>发布分支：master</td><td>xxx</td><td>是</td><td>1</td><td>小马</td></tr><tr><td>service-xxx2</td><td>发布分支：master</td><td>xxx</td><td>是</td><td>2</td><td>小王</td></tr><tr><td>xxx</td><td>xxx</td><td>xxx</td><td>xxx</td><td>xxx</td><td>xxx</td></tr></tbody></table><h1 id="2、配置"><a href="#2、配置" class="headerlink" title="2、配置"></a>2、配置</h1><h2 id="1、nacos配置变更：新增"><a href="#1、nacos配置变更：新增" class="headerlink" title="1、nacos配置变更：新增"></a>1、nacos配置变更：新增</h2><p>□ service-xxx1: </p><figure class="highlight yaml"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="string">xxx</span></span><br></pre></div></figure></td></tr></table></figure><h2 id="2、nacos配置变更：修改"><a href="#2、nacos配置变更：修改" class="headerlink" title="2、nacos配置变更：修改"></a>2、nacos配置变更：修改</h2><p>无</p><h1 id="3、数据库"><a href="#3、数据库" class="headerlink" title="3、数据库"></a>3、数据库</h1><h2 id="1、表结构：新增"><a href="#1、表结构：新增" class="headerlink" title="1、表结构：新增"></a>1、表结构：新增</h2><p>□ service-xxx1：@小马</p><figure class="highlight sql"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"># t1表</span><br><span class="line"></span><br><span class="line"># t2表</span><br></pre></div></figure></td></tr></table></figure><h2 id="2、表结构：修改"><a href="#2、表结构：修改" class="headerlink" title="2、表结构：修改"></a>2、表结构：修改</h2><p>□ service-xxx1：@小马</p><figure class="highlight sql"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"># t1表</span><br><span class="line"></span><br><span class="line"># t2表</span><br></pre></div></figure></td></tr></table></figure><h2 id="3、数据初始化"><a href="#3、数据初始化" class="headerlink" title="3、数据初始化"></a>3、数据初始化</h2><p>□ service-xxx1：@小马</p><figure class="highlight sql"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t1 xxxx;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t1 xxxx;</span><br></pre></div></figure></td></tr></table></figure><h1 id="4、定时任务"><a href="#4、定时任务" class="headerlink" title="4、定时任务"></a>4、定时任务</h1><table><thead><tr><th>执行器</th><th>handler</th><th>描述</th><th>cron</th><th>cron说明</th><th>维护人</th></tr></thead><tbody><tr><td>service-xxx1</td><td>remoteScanDealTask</td><td>异地扫码处理</td><td>0 0 3 * * ?</td><td>每天凌晨3点执行</td><td>小马</td></tr></tbody></table><h1 id="5、特殊说明"><a href="#5、特殊说明" class="headerlink" title="5、特殊说明"></a>5、特殊说明</h1><p>根据项目发布中需要补充的说明，例如大型项目的回退方案，数据变更较多的表事先备份等</p>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件开发</tag>
      
      <tag>发布清单</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>软件开发：技术方案</title>
    <link href="/2022/05/06/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%EF%BC%9A%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88/"/>
    <url>/2022/05/06/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%EF%BC%9A%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在一些小的软件公司，需求功能开发没有规范、固定的流程，可能运营、老板等随便口述一下需求内容，研发人员就开始撸代码，一些简单的改动可以这样做，那么如果稍微复杂一点的需求，也这样做会造成哪些问题尼？</p><ol><li>低效的开发过程：如果不提前评估内部功能清单、实现细节、外部依赖，直接上手撸代码，可能写到一半，发现这个方案实现不了，就可能会造成项目延期风险</li><li>风险和质量问题：如果不提前进行需求分析、评估改动内容、技术实现、技术兼容、测试范围，可能会造成代码写完了，才发现和产品经理的需求南辕北辙，甚至推倒重来；也可能未评估到对已有功能的兼容性影响，结果本次功能是完成了，结果其他功能没法用了。</li><li>可维护性和扩展性问题：一个需求可能经过长时间的迭代，如果每次迭代都没有技术方案，那对于后续的维护、扩展，是致命的，经过几个月后，可能自己都已经忘记了当初为什么要这样干，更不用说是别人来接手。</li><li>沟通和合作困难：如果一个需求需要多人，甚至跨团队的协作，没有技术方案，沟通会变得异常困难，全靠口口相传，可能产生严重后果。比如：你和上游定义了1个API的结构，结果到联调时，发现上游并不是按照约定来提供的，此时上游说当时就是这样沟通的，互相推诿扯皮，导致项目延期。</li></ol><p>虽然不写技术方案，确实有很多弊端，但即便是博主我自己，在之前待过的几家公司，在做需求的时候，都没有技术方案设计、评审这些环节。在产品经理将需求讲解完毕，就直接加入代码开发了。直到后面进入了一家稍微大型点的公司，对需求开发生命周期有着较为标准、严格的标准，才有了技术方案这个东西。</p><p>那么有些需求工期紧、开发任务重；有些需求又过于简单，可能只改动了一句代码；到底该怎么看待技术方案尼？</p><h1 id="when？"><a href="#when？" class="headerlink" title="when？"></a>when？</h1><p>什么时候该写技术方案尼？</p><p>1、项目工时超过了 xx 人&#x2F;天，必须写技术方案 （我司规定超过了1人天，则必须有技术方案）</p><p>2、代码改动小，但业务影响范围广，需要写技术方案：评估影响面、测试范围、风险、灰度&#x2F;应急方案</p><p>3、工时短，但涉及到兼容问题，需要写技术方案。比如：MQ的结构需要变化，就要考虑到新老MQ消息体如何兼容</p><p>. . .</p><h1 id="how？"><a href="#how？" class="headerlink" title="how？"></a>how？</h1><p>那到底应该怎么写技术方案尼？下面结合博主工作经验，以其中1个实际项目给出示例</p><h1 id="礼品卡-清结算侧技术方案"><a href="#礼品卡-清结算侧技术方案" class="headerlink" title="礼品卡-清结算侧技术方案"></a>礼品卡-清结算侧技术方案</h1><h2 id="概述及术语"><a href="#概述及术语" class="headerlink" title="概述及术语"></a>概述及术语</h2><p>对一些系统中产生的术语做出解释</p><table><thead><tr><th><strong>名词列表</strong></th><th><strong>名词含义</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>礼品卡</td><td>用户可以购买礼品卡赠送给好友，好友通过卡片去线下网点兑换商品</td><td></td></tr></tbody></table><h2 id="1-需求背景"><a href="#1-需求背景" class="headerlink" title="1 需求背景"></a>1 需求背景</h2><p>可以引用产品文档，并且带上产品文档链接。</p><p>需求文档地址：xxx</p><h3 id="业务背景"><a href="#业务背景" class="headerlink" title="业务背景"></a>业务背景</h3><p>根据每年的节日与营销节点，将全年时间划分为6段主题营销：</p><ol><li>配合营销节点，设计不同主题的卡面样式。</li><li>同时配合营销节点的礼品卡销售，搭配进行主题传播推广。</li></ol><table><thead><tr><th><strong>活动周期</strong></th><th><strong>营销节点</strong></th><th><strong>方向主题</strong></th><th><strong>卡面设计</strong></th></tr></thead><tbody><tr><td>1-2月</td><td>春节</td><td>过年、团圆</td><td>根据节点营销主题进行卡面设计与呈现</td></tr><tr><td>3-4月</td><td>龙抬头</td><td>祈福、好运</td><td></td></tr><tr><td>5-6月</td><td>端午</td><td>团圆、祈福</td><td></td></tr><tr><td>6月</td><td>父亲节</td><td>限时、祝福</td><td></td></tr><tr><td>7-8月</td><td>毕业季+调酒节</td><td>升学、谢师、调酒节主题</td><td></td></tr><tr><td>9月</td><td>中秋</td><td>团圆、祈福</td><td></td></tr><tr><td>10月</td><td>国庆+重阳节</td><td>限时、祝福</td><td></td></tr><tr><td>11~12月</td><td>涨价节</td><td>涨价节主题</td><td></td></tr></tbody></table><h3 id="业务目标"><a href="#业务目标" class="headerlink" title="业务目标"></a>业务目标</h3><p>O：通过礼品卡的社交属性，提升动销</p><p>KR1：达到1000万的动销额</p><p>KR2：达到1.1万用户数量</p><h2 id="2-业务分析"><a href="#2-业务分析" class="headerlink" title="2 业务分析"></a>2 业务分析</h2><h3 id="业务流程"><a href="#业务流程" class="headerlink" title="业务流程"></a>业务流程</h3><p>说明：业务整体流程，和系统业务流程区别，这里不关系系统，只关心纯业务流。</p><h3 id="业务用例"><a href="#业务用例" class="headerlink" title="业务用例"></a>业务用例</h3><p>说明：将本次改造拆分为一个一个功能点，然后每个功能点下面再拆出对应的用例。谁？何时？何地？干了事情？</p><img src="/2022/05/06/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%EF%BC%9A%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88/image-20230606144507168.png" alt="image-20230606144507168" style="zoom:100%;"> <h2 id="3-系统分析"><a href="#3-系统分析" class="headerlink" title="3 系统分析"></a>3 系统分析</h2><h3 id="系统用例"><a href="#系统用例" class="headerlink" title="系统用例"></a>系统用例</h3><img src="/2022/05/06/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%EF%BC%9A%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88/image-20230606145228932.png" alt="image-20230606145228932" style="zoom:80%;"> <h3 id="内部功能清单"><a href="#内部功能清单" class="headerlink" title="内部功能清单"></a>内部功能清单</h3><table><thead><tr><th><strong>序号</strong></th><th><strong>功能点</strong></th><th><strong>修改类型</strong></th><th><strong>功能描述</strong></th><th><strong>开发者</strong></th></tr></thead><tbody><tr><td>1</td><td>消费者买卡</td><td>新增</td><td>消费者买卡时，将买卡的货款实时转账给购买网点的店老板</td><td>小马</td></tr><tr><td>2</td><td>消费者兑换商品</td><td>新增</td><td>消费者使用礼品卡去线下网点兑换商品时，给线下网点计算&#x2F;发放返利</td><td>小马</td></tr><tr><td>3</td><td>店老板返利查询</td><td>新增</td><td>店老板在商家后台查看返利到账情况</td><td>小张</td></tr></tbody></table><h3 id="依赖方功能清单"><a href="#依赖方功能清单" class="headerlink" title="依赖方功能清单"></a>依赖方功能清单</h3><table><thead><tr><th><strong>序号</strong></th><th><strong>依赖系统</strong></th><th><strong>功能点</strong></th><th><strong>功能描述</strong></th><th><strong>修改类型</strong></th><th><strong>对接人</strong></th></tr></thead><tbody><tr><td>1</td><td>订单</td><td>消费者买卡</td><td>消费者购买礼品卡时，发送MQ通知</td><td>新增</td><td>小王</td></tr><tr><td>2</td><td>订单</td><td>消费者兑换商品</td><td>消费者使用礼品卡兑换商品时，发送MQ通知</td><td>新增</td><td>小王</td></tr></tbody></table><h2 id="4-架构设计"><a href="#4-架构设计" class="headerlink" title="4 架构设计"></a>4 架构设计</h2><p>说明：讲清楚业务架构、应用架构，二选一。即使是小迭代架构不变也需要引用之前的架构图。</p><h3 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h3><img src="/2022/05/06/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%EF%BC%9A%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88/image-20230606162418206.png" alt="image-20230606162418206" style="zoom:100%;">  <h3 id="核心功能流程图-时序图"><a href="#核心功能流程图-时序图" class="headerlink" title="核心功能流程图&#x2F;时序图"></a>核心功能流程图&#x2F;时序图</h3><h4 id="1、消费者买卡"><a href="#1、消费者买卡" class="headerlink" title="1、消费者买卡"></a>1、消费者买卡</h4><img src="/2022/05/06/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%EF%BC%9A%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88/image-20230606150738944.png" alt="image-20230606150738944" style="zoom:80%;">  <h4 id="2、消费者兑换商品"><a href="#2、消费者兑换商品" class="headerlink" title="2、消费者兑换商品"></a>2、消费者兑换商品</h4><img src="/2022/05/06/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%EF%BC%9A%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88/image-20230606152031660.png" alt="image-20230606152031660" style="zoom:80%;"> <h2 id="4-模型设计"><a href="#4-模型设计" class="headerlink" title="4 模型设计"></a>4 模型设计</h2><h3 id="状态机"><a href="#状态机" class="headerlink" title="状态机"></a>状态机</h3><img src="/2022/05/06/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%EF%BC%9A%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88/image-20230606155957205.png" alt="image-20230606155957205" style="zoom:80%;"> <h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><img src="/2022/05/06/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%EF%BC%9A%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88/image-20230606153112382.png" alt="image-20230606153112382" style="zoom:80%;"> <h2 id="5-接口详细设计"><a href="#5-接口详细设计" class="headerlink" title="5 接口详细设计"></a>5 接口详细设计</h2><p>说明：接口入参、出参字段、错误码、实现的逻辑描述、接口变更的影响范围</p><h3 id="1、消费者买卡-1"><a href="#1、消费者买卡-1" class="headerlink" title="1、消费者买卡"></a>1、消费者买卡</h3><p>□ 监听订单场景：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line">CLOUD_BUY_CARD(600, &quot;CLOUD_BUY_CARD&quot;, &quot;云店购买提货卡&quot;)</span><br></pre></div></figure></td></tr></table></figure><p>□ 监听订单状态：支付成功</p><p>□  Topic：<code>ORDER_STATE_CHANGED</code></p><p>□ MQ结构：</p><figure class="highlight json"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;orderId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;订单id&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;sceneCode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CLOUD_BUY_CARD&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;state&quot;</span><span class="punctuation">:</span> <span class="string">&quot;支付成功&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;orderTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-10-10 17:23:01&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;payTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-10-10 17:23:01&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;pointId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;uniqueId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;订单id&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;skuList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;skuId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;qty&quot;</span><span class="punctuation">:</span> <span class="number">0.00</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;currentQty&quot;</span><span class="punctuation">:</span> <span class="number">0.00</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;salePrice&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></div></figure></td></tr></table></figure><h3 id="2、消费者兑换商品-1"><a href="#2、消费者兑换商品-1" class="headerlink" title="2、消费者兑换商品"></a>2、消费者兑换商品</h3><p>□ 监听订单场景：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line">CLOUD_CARD_EXCHANGE_OFFLINE(601, &quot;CLOUD_CARD_EXCHANGE_OFFLINE&quot;, &quot;云店线下卡兑换酒&quot;)</span><br></pre></div></figure></td></tr></table></figure><p>□ 监听订单状态：完成</p><p>□  Topic：<code>ORDER_STATE_CHANGED</code></p><p>□  MQ结构：</p><figure class="highlight json"><table><tr><td class="gutter"><figure><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></figure></td><td class="code"><figure><div class="code-wrapper"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;orderId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;订单id&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;sceneCode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CLOUD_CARD_EXCHANGE_OFFLINE&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;state&quot;</span><span class="punctuation">:</span> <span class="string">&quot;兑换完成&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;orderTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-10-10 17:23:01&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;payTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-10-10 17:23:01&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;pointId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;uniqueId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;目前必须一次性提完,则为订单id )后续如果分批提，则给每次提货的id)&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;skuList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;skuId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;qty&quot;</span><span class="punctuation">:</span> <span class="number">0.00</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;currentQty&quot;</span><span class="punctuation">:</span> <span class="number">0.00</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;salePrice&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;mixContractId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;codeInfoList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://q.xxx.cn/t/?h=_4jlhc0bg08e1&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;codeType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PURCHASE&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></div></figure></td></tr></table></figure><h2 id="6-其他方面"><a href="#6-其他方面" class="headerlink" title="6 其他方面"></a>6 其他方面</h2><h3 id="兼容性分析"><a href="#兼容性分析" class="headerlink" title="兼容性分析"></a>兼容性分析</h3><p>说明：主要分为新老代码兼容、新老数据兼容，具体包括但不限于前后端兼容、发布兼容、数据变更兼容、接口兼容、数据序列化和反序列化的兼容等。</p><h3 id="灰度方案"><a href="#灰度方案" class="headerlink" title="灰度方案"></a>灰度方案</h3><ol><li><p>灰度是系统平滑升级的必要条件</p></li><li><p>灰度方案需要找准灰度的特征属性，常用的如：区域、人员id</p></li></ol><p>灰度：由订单侧从入口进行灰度控制</p><h3 id="监控方案"><a href="#监控方案" class="headerlink" title="监控方案"></a>监控方案</h3><img src="/2022/05/06/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%EF%BC%9A%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88/image-20230606160517204.png" alt="image-20230606160517204" style="zoom:80%;"> <h3 id="应急方案"><a href="#应急方案" class="headerlink" title="应急方案"></a>应急方案</h3><img src="/2022/05/06/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%EF%BC%9A%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88/image-20230606154025828.png" alt="image-20230606154025828" style="zoom:80%;">  ]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件开发</tag>
      
      <tag>需求分析</tag>
      
      <tag>技术方案</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
